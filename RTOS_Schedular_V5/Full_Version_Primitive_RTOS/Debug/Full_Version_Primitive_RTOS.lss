
Full_Version_Primitive_RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00002258  000022ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008000ec  008000ec  00002378  2**0
                  ALLOC
  3 .stab         00001d28  00000000  00000000  00002378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000146e  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000550e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000564e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000057be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007407  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000082f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000090a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000948d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009c5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 31       	cpi	r26, 0x11	; 17
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <main>
      8a:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ed       	ldi	r26, 0xDB	; 219
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ed       	ldi	r24, 0xDB	; 219
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_u8SetPinDirecton>:




u8 DIO_u8SetPinDirecton(u8 copy_u8Port,u8 copy_u8Pin,u8 copy_u8Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState=0;
     b60:	19 82       	std	Y+1, r1	; 0x01

	if (copy_u8Pin<=7)
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <DIO_u8SetPinDirecton+0x24>
     b68:	f4 c0       	rjmp	.+488    	; 0xd52 <DIO_u8SetPinDirecton+0x20c>
	{
		if (copy_u8Direction== DIO_u8PIN_INPUT)
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	88 23       	and	r24, r24
     b6e:	09 f0       	breq	.+2      	; 0xb72 <DIO_u8SetPinDirecton+0x2c>
     b70:	77 c0       	rjmp	.+238    	; 0xc60 <DIO_u8SetPinDirecton+0x11a>
		{
			switch(copy_u8Port)
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	38 87       	std	Y+8, r19	; 0x08
     b7a:	2f 83       	std	Y+7, r18	; 0x07
     b7c:	8f 81       	ldd	r24, Y+7	; 0x07
     b7e:	98 85       	ldd	r25, Y+8	; 0x08
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	91 05       	cpc	r25, r1
     b84:	59 f1       	breq	.+86     	; 0xbdc <DIO_u8SetPinDirecton+0x96>
     b86:	2f 81       	ldd	r18, Y+7	; 0x07
     b88:	38 85       	ldd	r19, Y+8	; 0x08
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	31 05       	cpc	r19, r1
     b8e:	2c f4       	brge	.+10     	; 0xb9a <DIO_u8SetPinDirecton+0x54>
     b90:	8f 81       	ldd	r24, Y+7	; 0x07
     b92:	98 85       	ldd	r25, Y+8	; 0x08
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	69 f0       	breq	.+26     	; 0xbb2 <DIO_u8SetPinDirecton+0x6c>
     b98:	60 c0       	rjmp	.+192    	; 0xc5a <DIO_u8SetPinDirecton+0x114>
     b9a:	2f 81       	ldd	r18, Y+7	; 0x07
     b9c:	38 85       	ldd	r19, Y+8	; 0x08
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	31 05       	cpc	r19, r1
     ba2:	89 f1       	breq	.+98     	; 0xc06 <DIO_u8SetPinDirecton+0xc0>
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	91 05       	cpc	r25, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <DIO_u8SetPinDirecton+0x6a>
     bae:	40 c0       	rjmp	.+128    	; 0xc30 <DIO_u8SetPinDirecton+0xea>
     bb0:	54 c0       	rjmp	.+168    	; 0xc5a <DIO_u8SetPinDirecton+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,copy_u8Pin);break;
     bb2:	aa e3       	ldi	r26, 0x3A	; 58
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ea e3       	ldi	r30, 0x3A	; 58
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_u8SetPinDirecton+0x8a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_u8SetPinDirecton+0x86>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	bd c0       	rjmp	.+378    	; 0xd56 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,copy_u8Pin);break;
     bdc:	a7 e3       	ldi	r26, 0x37	; 55
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e3       	ldi	r30, 0x37	; 55
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_u8SetPinDirecton+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_u8SetPinDirecton+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	a8 c0       	rjmp	.+336    	; 0xd56 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,copy_u8Pin);break;
     c06:	a4 e3       	ldi	r26, 0x34	; 52
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e4 e3       	ldi	r30, 0x34	; 52
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_u8SetPinDirecton+0xde>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <DIO_u8SetPinDirecton+0xda>
     c28:	80 95       	com	r24
     c2a:	84 23       	and	r24, r20
     c2c:	8c 93       	st	X, r24
     c2e:	93 c0       	rjmp	.+294    	; 0xd56 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,copy_u8Pin);break;
     c30:	a1 e3       	ldi	r26, 0x31	; 49
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e1 e3       	ldi	r30, 0x31	; 49
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 2e       	mov	r0, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <DIO_u8SetPinDirecton+0x108>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <DIO_u8SetPinDirecton+0x104>
     c52:	80 95       	com	r24
     c54:	84 23       	and	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	7e c0       	rjmp	.+252    	; 0xd56 <DIO_u8SetPinDirecton+0x210>
			default: Local_u8ErorrState =1;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	7b c0       	rjmp	.+246    	; 0xd56 <DIO_u8SetPinDirecton+0x210>
			}
		}
		else if(copy_u8Direction==DIO_u8PIN_OUTPUT)
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	09 f0       	breq	.+2      	; 0xc68 <DIO_u8SetPinDirecton+0x122>
     c66:	72 c0       	rjmp	.+228    	; 0xd4c <DIO_u8SetPinDirecton+0x206>
		{
			switch(copy_u8Port)
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	3e 83       	std	Y+6, r19	; 0x06
     c70:	2d 83       	std	Y+5, r18	; 0x05
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	9e 81       	ldd	r25, Y+6	; 0x06
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	91 05       	cpc	r25, r1
     c7a:	49 f1       	breq	.+82     	; 0xcce <DIO_u8SetPinDirecton+0x188>
     c7c:	2d 81       	ldd	r18, Y+5	; 0x05
     c7e:	3e 81       	ldd	r19, Y+6	; 0x06
     c80:	22 30       	cpi	r18, 0x02	; 2
     c82:	31 05       	cpc	r19, r1
     c84:	2c f4       	brge	.+10     	; 0xc90 <DIO_u8SetPinDirecton+0x14a>
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	61 f0       	breq	.+24     	; 0xca6 <DIO_u8SetPinDirecton+0x160>
     c8e:	5b c0       	rjmp	.+182    	; 0xd46 <DIO_u8SetPinDirecton+0x200>
     c90:	2d 81       	ldd	r18, Y+5	; 0x05
     c92:	3e 81       	ldd	r19, Y+6	; 0x06
     c94:	22 30       	cpi	r18, 0x02	; 2
     c96:	31 05       	cpc	r19, r1
     c98:	71 f1       	breq	.+92     	; 0xcf6 <DIO_u8SetPinDirecton+0x1b0>
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	91 05       	cpc	r25, r1
     ca2:	e9 f1       	breq	.+122    	; 0xd1e <DIO_u8SetPinDirecton+0x1d8>
     ca4:	50 c0       	rjmp	.+160    	; 0xd46 <DIO_u8SetPinDirecton+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,copy_u8Pin);break;
     ca6:	aa e3       	ldi	r26, 0x3A	; 58
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ea e3       	ldi	r30, 0x3A	; 58
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_u8SetPinDirecton+0x17e>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_u8SetPinDirecton+0x17a>
     cc8:	84 2b       	or	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	44 c0       	rjmp	.+136    	; 0xd56 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,copy_u8Pin);break;
     cce:	a7 e3       	ldi	r26, 0x37	; 55
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e3       	ldi	r30, 0x37	; 55
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_u8SetPinDirecton+0x1a6>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_u8SetPinDirecton+0x1a2>
     cf0:	84 2b       	or	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	30 c0       	rjmp	.+96     	; 0xd56 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,copy_u8Pin);break;
     cf6:	a4 e3       	ldi	r26, 0x34	; 52
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_u8SetPinDirecton+0x1ce>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_u8SetPinDirecton+0x1ca>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	1c c0       	rjmp	.+56     	; 0xd56 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,copy_u8Pin);break;
     d1e:	a1 e3       	ldi	r26, 0x31	; 49
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e1 e3       	ldi	r30, 0x31	; 49
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_u8SetPinDirecton+0x1f6>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_u8SetPinDirecton+0x1f2>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <DIO_u8SetPinDirecton+0x210>
			default: Local_u8ErorrState =1;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <DIO_u8SetPinDirecton+0x210>
			}
		}
		else
		{
			Local_u8ErorrState = 1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <DIO_u8SetPinDirecton+0x210>
		}
	}
	else
	{
		Local_u8ErorrState = 1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErorrState;
     d56:	89 81       	ldd	r24, Y+1	; 0x01
}
     d58:	28 96       	adiw	r28, 0x08	; 8
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	08 95       	ret

00000d6a <DIO_u8SetPortDirecton>:
/*________________________________________________________________________*/
u8 DIO_u8SetPortDirecton(u8 copy_u8Port,u8 copy_u8Direction)
{
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <DIO_u8SetPortDirecton+0x6>
     d70:	00 d0       	rcall	.+0      	; 0xd72 <DIO_u8SetPortDirecton+0x8>
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState=0;
     d7c:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8Port)
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	3d 83       	std	Y+5, r19	; 0x05
     d86:	2c 83       	std	Y+4, r18	; 0x04
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	9d 81       	ldd	r25, Y+5	; 0x05
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	91 05       	cpc	r25, r1
     d90:	d1 f0       	breq	.+52     	; 0xdc6 <DIO_u8SetPortDirecton+0x5c>
     d92:	2c 81       	ldd	r18, Y+4	; 0x04
     d94:	3d 81       	ldd	r19, Y+5	; 0x05
     d96:	22 30       	cpi	r18, 0x02	; 2
     d98:	31 05       	cpc	r19, r1
     d9a:	2c f4       	brge	.+10     	; 0xda6 <DIO_u8SetPortDirecton+0x3c>
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	61 f0       	breq	.+24     	; 0xdbc <DIO_u8SetPortDirecton+0x52>
     da4:	1f c0       	rjmp	.+62     	; 0xde4 <DIO_u8SetPortDirecton+0x7a>
     da6:	2c 81       	ldd	r18, Y+4	; 0x04
     da8:	3d 81       	ldd	r19, Y+5	; 0x05
     daa:	22 30       	cpi	r18, 0x02	; 2
     dac:	31 05       	cpc	r19, r1
     dae:	81 f0       	breq	.+32     	; 0xdd0 <DIO_u8SetPortDirecton+0x66>
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	83 30       	cpi	r24, 0x03	; 3
     db6:	91 05       	cpc	r25, r1
     db8:	81 f0       	breq	.+32     	; 0xdda <DIO_u8SetPortDirecton+0x70>
     dba:	14 c0       	rjmp	.+40     	; 0xde4 <DIO_u8SetPortDirecton+0x7a>
	{
	case DIO_u8PORTA: DDRA =copy_u8Direction;break;
     dbc:	ea e3       	ldi	r30, 0x3A	; 58
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	80 83       	st	Z, r24
     dc4:	11 c0       	rjmp	.+34     	; 0xde8 <DIO_u8SetPortDirecton+0x7e>
	case DIO_u8PORTB: DDRB =copy_u8Direction;break;
     dc6:	e7 e3       	ldi	r30, 0x37	; 55
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	80 83       	st	Z, r24
     dce:	0c c0       	rjmp	.+24     	; 0xde8 <DIO_u8SetPortDirecton+0x7e>
	case DIO_u8PORTC: DDRC =copy_u8Direction;break;
     dd0:	e4 e3       	ldi	r30, 0x34	; 52
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	80 83       	st	Z, r24
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <DIO_u8SetPortDirecton+0x7e>
	case DIO_u8PORTD: DDRD =copy_u8Direction;break;
     dda:	e1 e3       	ldi	r30, 0x31	; 49
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	80 83       	st	Z, r24
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_u8SetPortDirecton+0x7e>
	default: Local_u8ErorrState=1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErorrState;
     de8:	89 81       	ldd	r24, Y+1	; 0x01

}
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <DIO_u8SetPinValue>:

/*________________________________________________________________________*/

u8 DIO_u8SetPinValue(u8 copy_u8Port,u8 copy_u8Pin,u8 copy_u8Value)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	28 97       	sbiw	r28, 0x08	; 8
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	6b 83       	std	Y+3, r22	; 0x03
     e12:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState=0;
     e14:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Pin<=7)
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	88 30       	cpi	r24, 0x08	; 8
     e1a:	08 f0       	brcs	.+2      	; 0xe1e <DIO_u8SetPinValue+0x24>
     e1c:	f4 c0       	rjmp	.+488    	; 0x1006 <DIO_u8SetPinValue+0x20c>
	{
		if(copy_u8Value==DIO_u8PIN_LOW)
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	88 23       	and	r24, r24
     e22:	09 f0       	breq	.+2      	; 0xe26 <DIO_u8SetPinValue+0x2c>
     e24:	77 c0       	rjmp	.+238    	; 0xf14 <DIO_u8SetPinValue+0x11a>
		{
			switch(copy_u8Port)
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	38 87       	std	Y+8, r19	; 0x08
     e2e:	2f 83       	std	Y+7, r18	; 0x07
     e30:	8f 81       	ldd	r24, Y+7	; 0x07
     e32:	98 85       	ldd	r25, Y+8	; 0x08
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	91 05       	cpc	r25, r1
     e38:	59 f1       	breq	.+86     	; 0xe90 <DIO_u8SetPinValue+0x96>
     e3a:	2f 81       	ldd	r18, Y+7	; 0x07
     e3c:	38 85       	ldd	r19, Y+8	; 0x08
     e3e:	22 30       	cpi	r18, 0x02	; 2
     e40:	31 05       	cpc	r19, r1
     e42:	2c f4       	brge	.+10     	; 0xe4e <DIO_u8SetPinValue+0x54>
     e44:	8f 81       	ldd	r24, Y+7	; 0x07
     e46:	98 85       	ldd	r25, Y+8	; 0x08
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	69 f0       	breq	.+26     	; 0xe66 <DIO_u8SetPinValue+0x6c>
     e4c:	60 c0       	rjmp	.+192    	; 0xf0e <DIO_u8SetPinValue+0x114>
     e4e:	2f 81       	ldd	r18, Y+7	; 0x07
     e50:	38 85       	ldd	r19, Y+8	; 0x08
     e52:	22 30       	cpi	r18, 0x02	; 2
     e54:	31 05       	cpc	r19, r1
     e56:	89 f1       	breq	.+98     	; 0xeba <DIO_u8SetPinValue+0xc0>
     e58:	8f 81       	ldd	r24, Y+7	; 0x07
     e5a:	98 85       	ldd	r25, Y+8	; 0x08
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	91 05       	cpc	r25, r1
     e60:	09 f4       	brne	.+2      	; 0xe64 <DIO_u8SetPinValue+0x6a>
     e62:	40 c0       	rjmp	.+128    	; 0xee4 <DIO_u8SetPinValue+0xea>
     e64:	54 c0       	rjmp	.+168    	; 0xf0e <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,copy_u8Pin);break;
     e66:	ab e3       	ldi	r26, 0x3B	; 59
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	eb e3       	ldi	r30, 0x3B	; 59
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_u8SetPinValue+0x8a>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_u8SetPinValue+0x86>
     e88:	80 95       	com	r24
     e8a:	84 23       	and	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	bd c0       	rjmp	.+378    	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,copy_u8Pin);break;
     e90:	a8 e3       	ldi	r26, 0x38	; 56
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e8 e3       	ldi	r30, 0x38	; 56
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_u8SetPinValue+0xb4>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_u8SetPinValue+0xb0>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	a8 c0       	rjmp	.+336    	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,copy_u8Pin);break;
     eba:	a5 e3       	ldi	r26, 0x35	; 53
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e5 e3       	ldi	r30, 0x35	; 53
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_u8SetPinValue+0xde>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_u8SetPinValue+0xda>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	93 c0       	rjmp	.+294    	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,copy_u8Pin);break;
     ee4:	a2 e3       	ldi	r26, 0x32	; 50
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e2 e3       	ldi	r30, 0x32	; 50
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_u8SetPinValue+0x108>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_u8SetPinValue+0x104>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	7e c0       	rjmp	.+252    	; 0x100a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErorrState =1;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	7b c0       	rjmp	.+246    	; 0x100a <DIO_u8SetPinValue+0x210>
			}
		}
		else if (copy_u8Value==DIO_u8PIN_HIGH)
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	09 f0       	breq	.+2      	; 0xf1c <DIO_u8SetPinValue+0x122>
     f1a:	72 c0       	rjmp	.+228    	; 0x1000 <DIO_u8SetPinValue+0x206>
		{
			switch(copy_u8Port)
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	3e 83       	std	Y+6, r19	; 0x06
     f24:	2d 83       	std	Y+5, r18	; 0x05
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	91 05       	cpc	r25, r1
     f2e:	49 f1       	breq	.+82     	; 0xf82 <DIO_u8SetPinValue+0x188>
     f30:	2d 81       	ldd	r18, Y+5	; 0x05
     f32:	3e 81       	ldd	r19, Y+6	; 0x06
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	2c f4       	brge	.+10     	; 0xf44 <DIO_u8SetPinValue+0x14a>
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	61 f0       	breq	.+24     	; 0xf5a <DIO_u8SetPinValue+0x160>
     f42:	5b c0       	rjmp	.+182    	; 0xffa <DIO_u8SetPinValue+0x200>
     f44:	2d 81       	ldd	r18, Y+5	; 0x05
     f46:	3e 81       	ldd	r19, Y+6	; 0x06
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	71 f1       	breq	.+92     	; 0xfaa <DIO_u8SetPinValue+0x1b0>
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	91 05       	cpc	r25, r1
     f56:	e9 f1       	breq	.+122    	; 0xfd2 <DIO_u8SetPinValue+0x1d8>
     f58:	50 c0       	rjmp	.+160    	; 0xffa <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,copy_u8Pin);break;
     f5a:	ab e3       	ldi	r26, 0x3B	; 59
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	eb e3       	ldi	r30, 0x3B	; 59
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_u8SetPinValue+0x17e>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_u8SetPinValue+0x17a>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	44 c0       	rjmp	.+136    	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,copy_u8Pin);break;
     f82:	a8 e3       	ldi	r26, 0x38	; 56
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e8 e3       	ldi	r30, 0x38	; 56
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_u8SetPinValue+0x1a6>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_u8SetPinValue+0x1a2>
     fa4:	84 2b       	or	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	30 c0       	rjmp	.+96     	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,copy_u8Pin);break;
     faa:	a5 e3       	ldi	r26, 0x35	; 53
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e5 e3       	ldi	r30, 0x35	; 53
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_u8SetPinValue+0x1ce>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_u8SetPinValue+0x1ca>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	1c c0       	rjmp	.+56     	; 0x100a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,copy_u8Pin);break;
     fd2:	a2 e3       	ldi	r26, 0x32	; 50
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e2 e3       	ldi	r30, 0x32	; 50
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_u8SetPinValue+0x1f6>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_u8SetPinValue+0x1f2>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErorrState =1;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErorrState =1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErorrState = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErorrState;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
}
    100c:	28 96       	adiw	r28, 0x08	; 8
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <DIO_u8SetPortValue>:
/*_______________________________________________________________________*/
u8 DIO_u8SetPortValue(u8 copy_u8Port,u8 copy_u8Value)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <DIO_u8SetPortValue+0x6>
    1024:	00 d0       	rcall	.+0      	; 0x1026 <DIO_u8SetPortValue+0x8>
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	8a 83       	std	Y+2, r24	; 0x02
    102e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState=0;
    1030:	19 82       	std	Y+1, r1	; 0x01
		switch(copy_u8Port)
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3d 83       	std	Y+5, r19	; 0x05
    103a:	2c 83       	std	Y+4, r18	; 0x04
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	9d 81       	ldd	r25, Y+5	; 0x05
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	d1 f0       	breq	.+52     	; 0x107a <DIO_u8SetPortValue+0x5c>
    1046:	2c 81       	ldd	r18, Y+4	; 0x04
    1048:	3d 81       	ldd	r19, Y+5	; 0x05
    104a:	22 30       	cpi	r18, 0x02	; 2
    104c:	31 05       	cpc	r19, r1
    104e:	2c f4       	brge	.+10     	; 0x105a <DIO_u8SetPortValue+0x3c>
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	61 f0       	breq	.+24     	; 0x1070 <DIO_u8SetPortValue+0x52>
    1058:	1f c0       	rjmp	.+62     	; 0x1098 <DIO_u8SetPortValue+0x7a>
    105a:	2c 81       	ldd	r18, Y+4	; 0x04
    105c:	3d 81       	ldd	r19, Y+5	; 0x05
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	81 f0       	breq	.+32     	; 0x1084 <DIO_u8SetPortValue+0x66>
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	83 30       	cpi	r24, 0x03	; 3
    106a:	91 05       	cpc	r25, r1
    106c:	81 f0       	breq	.+32     	; 0x108e <DIO_u8SetPortValue+0x70>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <DIO_u8SetPortValue+0x7a>
		{
		case DIO_u8PORTA: PORTA =copy_u8Value;break;
    1070:	eb e3       	ldi	r30, 0x3B	; 59
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	80 83       	st	Z, r24
    1078:	11 c0       	rjmp	.+34     	; 0x109c <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB: PORTB =copy_u8Value;break;
    107a:	e8 e3       	ldi	r30, 0x38	; 56
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	80 83       	st	Z, r24
    1082:	0c c0       	rjmp	.+24     	; 0x109c <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC: PORTC =copy_u8Value;break;
    1084:	e5 e3       	ldi	r30, 0x35	; 53
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	80 83       	st	Z, r24
    108c:	07 c0       	rjmp	.+14     	; 0x109c <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD: PORTD =copy_u8Value;break;
    108e:	e2 e3       	ldi	r30, 0x32	; 50
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	80 83       	st	Z, r24
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_u8SetPortValue+0x7e>
		default: Local_u8ErorrState=1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_u8ErorrState;
    109c:	89 81       	ldd	r24, Y+1	; 0x01

}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8Port,u8 copy_u8Pin,u8* copy_pu8Value)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	27 97       	sbiw	r28, 0x07	; 7
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	8a 83       	std	Y+2, r24	; 0x02
    10c4:	6b 83       	std	Y+3, r22	; 0x03
    10c6:	5d 83       	std	Y+5, r21	; 0x05
    10c8:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8ErorrState=0;
    10ca:	19 82       	std	Y+1, r1	; 0x01
if(copy_u8Pin<=DIO_u8PIN7 && *copy_pu8Value!=NULL)
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	88 30       	cpi	r24, 0x08	; 8
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <DIO_u8GetPinValue+0x26>
    10d2:	7c c0       	rjmp	.+248    	; 0x11cc <DIO_u8GetPinValue+0x11e>
    10d4:	ec 81       	ldd	r30, Y+4	; 0x04
    10d6:	fd 81       	ldd	r31, Y+5	; 0x05
    10d8:	80 81       	ld	r24, Z
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <DIO_u8GetPinValue+0x36>
    10e2:	74 c0       	rjmp	.+232    	; 0x11cc <DIO_u8GetPinValue+0x11e>
{
	switch(copy_u8Port)
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	3f 83       	std	Y+7, r19	; 0x07
    10ec:	2e 83       	std	Y+6, r18	; 0x06
    10ee:	4e 81       	ldd	r20, Y+6	; 0x06
    10f0:	5f 81       	ldd	r21, Y+7	; 0x07
    10f2:	41 30       	cpi	r20, 0x01	; 1
    10f4:	51 05       	cpc	r21, r1
    10f6:	59 f1       	breq	.+86     	; 0x114e <DIO_u8GetPinValue+0xa0>
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	9f 81       	ldd	r25, Y+7	; 0x07
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	91 05       	cpc	r25, r1
    1100:	34 f4       	brge	.+12     	; 0x110e <DIO_u8GetPinValue+0x60>
    1102:	2e 81       	ldd	r18, Y+6	; 0x06
    1104:	3f 81       	ldd	r19, Y+7	; 0x07
    1106:	21 15       	cp	r18, r1
    1108:	31 05       	cpc	r19, r1
    110a:	69 f0       	breq	.+26     	; 0x1126 <DIO_u8GetPinValue+0x78>
    110c:	5c c0       	rjmp	.+184    	; 0x11c6 <DIO_u8GetPinValue+0x118>
    110e:	4e 81       	ldd	r20, Y+6	; 0x06
    1110:	5f 81       	ldd	r21, Y+7	; 0x07
    1112:	42 30       	cpi	r20, 0x02	; 2
    1114:	51 05       	cpc	r21, r1
    1116:	79 f1       	breq	.+94     	; 0x1176 <DIO_u8GetPinValue+0xc8>
    1118:	8e 81       	ldd	r24, Y+6	; 0x06
    111a:	9f 81       	ldd	r25, Y+7	; 0x07
    111c:	83 30       	cpi	r24, 0x03	; 3
    111e:	91 05       	cpc	r25, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <DIO_u8GetPinValue+0x76>
    1122:	3d c0       	rjmp	.+122    	; 0x119e <DIO_u8GetPinValue+0xf0>
    1124:	50 c0       	rjmp	.+160    	; 0x11c6 <DIO_u8GetPinValue+0x118>
	{
	case DIO_u8PORTA:*copy_pu8Value = GET_BIT(PINA,copy_u8Pin);break;
    1126:	e9 e3       	ldi	r30, 0x39	; 57
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8GetPinValue+0x90>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_u8GetPinValue+0x8c>
    1142:	ca 01       	movw	r24, r20
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	ec 81       	ldd	r30, Y+4	; 0x04
    1148:	fd 81       	ldd	r31, Y+5	; 0x05
    114a:	80 83       	st	Z, r24
    114c:	41 c0       	rjmp	.+130    	; 0x11d0 <DIO_u8GetPinValue+0x122>
	case DIO_u8PORTB:*copy_pu8Value = GET_BIT(PINB,copy_u8Pin);break;
    114e:	e6 e3       	ldi	r30, 0x36	; 54
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_u8GetPinValue+0xb8>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_u8GetPinValue+0xb4>
    116a:	ca 01       	movw	r24, r20
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	ec 81       	ldd	r30, Y+4	; 0x04
    1170:	fd 81       	ldd	r31, Y+5	; 0x05
    1172:	80 83       	st	Z, r24
    1174:	2d c0       	rjmp	.+90     	; 0x11d0 <DIO_u8GetPinValue+0x122>
	case DIO_u8PORTC:*copy_pu8Value = GET_BIT(PINC,copy_u8Pin);break;
    1176:	e3 e3       	ldi	r30, 0x33	; 51
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a9 01       	movw	r20, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_u8GetPinValue+0xe0>
    118a:	55 95       	asr	r21
    118c:	47 95       	ror	r20
    118e:	8a 95       	dec	r24
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_u8GetPinValue+0xdc>
    1192:	ca 01       	movw	r24, r20
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	ec 81       	ldd	r30, Y+4	; 0x04
    1198:	fd 81       	ldd	r31, Y+5	; 0x05
    119a:	80 83       	st	Z, r24
    119c:	19 c0       	rjmp	.+50     	; 0x11d0 <DIO_u8GetPinValue+0x122>
	case DIO_u8PORTD:*copy_pu8Value = GET_BIT(PIND,copy_u8Pin);break;
    119e:	e0 e3       	ldi	r30, 0x30	; 48
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a9 01       	movw	r20, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_u8GetPinValue+0x108>
    11b2:	55 95       	asr	r21
    11b4:	47 95       	ror	r20
    11b6:	8a 95       	dec	r24
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_u8GetPinValue+0x104>
    11ba:	ca 01       	movw	r24, r20
    11bc:	81 70       	andi	r24, 0x01	; 1
    11be:	ec 81       	ldd	r30, Y+4	; 0x04
    11c0:	fd 81       	ldd	r31, Y+5	; 0x05
    11c2:	80 83       	st	Z, r24
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <DIO_u8GetPinValue+0x122>
	default: Local_u8ErorrState=1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_u8GetPinValue+0x122>
	}
}
else
{
	Local_u8ErorrState = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8ErorrState;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    11d2:	27 96       	adiw	r28, 0x07	; 7
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <GIE_voidEnable>:
#include "BIT_MATH.h"
#include"GIE_interface.h"
#include"GIE_register.h"

void GIE_voidEnable(void)
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    11ec:	af e5       	ldi	r26, 0x5F	; 95
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	ef e5       	ldi	r30, 0x5F	; 95
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 68       	ori	r24, 0x80	; 128
    11f8:	8c 93       	st	X, r24
	
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(SREG,SREG_I);
    1208:	af e5       	ldi	r26, 0x5F	; 95
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	ef e5       	ldi	r30, 0x5F	; 95
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	8f 77       	andi	r24, 0x7F	; 127
    1214:	8c 93       	st	X, r24

	
}
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <LED_voidToggle>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "LED_interface.h"

void LED_voidToggle(u8 copy_u8Port,u8 copy_u8Pin)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <LED_voidToggle+0x6>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	6a 83       	std	Y+2, r22	; 0x02

	static u8 Local_u8LedState = 0;
	TOG_BIT(Local_u8LedState,0);
    122a:	90 91 ec 00 	lds	r25, 0x00EC
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	89 27       	eor	r24, r25
    1232:	80 93 ec 00 	sts	0x00EC, r24
	DIO_u8SetPinValue(copy_u8Port,copy_u8Pin,Local_u8LedState);
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	68 2f       	mov	r22, r24
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	48 2f       	mov	r20, r24
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	80 91 ec 00 	lds	r24, 0x00EC
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	cb 01       	movw	r24, r22
    124c:	ba 01       	movw	r22, r20
    124e:	a9 01       	movw	r20, r18
    1250:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <PORT_voidInit>:
#include "PORT_register.h"



void PORT_voidInit(void)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62



	DDRA = PORTA_DIR;
    1266:	ea e3       	ldi	r30, 0x3A	; 58
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8f ef       	ldi	r24, 0xFF	; 255
    126c:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    126e:	e7 e3       	ldi	r30, 0x37	; 55
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1276:	e4 e3       	ldi	r30, 0x34	; 52
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    127e:	e1 e3       	ldi	r30, 0x31	; 49
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VALUE;
    1286:	eb e3       	ldi	r30, 0x3B	; 59
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VALUE;
    128c:	e8 e3       	ldi	r30, 0x38	; 56
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	10 82       	st	Z, r1
	PORTC = PORTC_INIT_VALUE;
    1292:	e5 e3       	ldi	r30, 0x35	; 53
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	86 e0       	ldi	r24, 0x06	; 6
    1298:	80 83       	st	Z, r24
	PORTD = PORTD_INIT_VALUE;
    129a:	e2 e3       	ldi	r30, 0x32	; 50
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	10 82       	st	Z, r1



}
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <FIFO_Init>:





FIFO_Statues FIFO_Init(FIFO_t* Fifo,DataType* buffer,uint32_t length){
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	28 97       	sbiw	r28, 0x08	; 8
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	7c 83       	std	Y+4, r23	; 0x04
    12c0:	6b 83       	std	Y+3, r22	; 0x03
    12c2:	2d 83       	std	Y+5, r18	; 0x05
    12c4:	3e 83       	std	Y+6, r19	; 0x06
    12c6:	4f 83       	std	Y+7, r20	; 0x07
    12c8:	58 87       	std	Y+8, r21	; 0x08

	//check if FIFO exist
//	if((buffer==NULL)||(Fifo->base==NULL)||(Fifo->head==NULL)||(Fifo->tail==NULL))
//		return FIFO_NULL;
	Fifo->base = buffer;
    12ca:	e9 81       	ldd	r30, Y+1	; 0x01
    12cc:	fa 81       	ldd	r31, Y+2	; 0x02
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	91 83       	std	Z+1, r25	; 0x01
    12d4:	80 83       	st	Z, r24
	Fifo->head = buffer;
    12d6:	e9 81       	ldd	r30, Y+1	; 0x01
    12d8:	fa 81       	ldd	r31, Y+2	; 0x02
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	95 83       	std	Z+5, r25	; 0x05
    12e0:	84 83       	std	Z+4, r24	; 0x04
	Fifo->tail = buffer;
    12e2:	e9 81       	ldd	r30, Y+1	; 0x01
    12e4:	fa 81       	ldd	r31, Y+2	; 0x02
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	93 83       	std	Z+3, r25	; 0x03
    12ec:	82 83       	std	Z+2, r24	; 0x02
	Fifo->length = length;
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	fa 81       	ldd	r31, Y+2	; 0x02
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	9e 81       	ldd	r25, Y+6	; 0x06
    12f6:	af 81       	ldd	r26, Y+7	; 0x07
    12f8:	b8 85       	ldd	r27, Y+8	; 0x08
    12fa:	86 83       	std	Z+6, r24	; 0x06
    12fc:	97 83       	std	Z+7, r25	; 0x07
    12fe:	a0 87       	std	Z+8, r26	; 0x08
    1300:	b1 87       	std	Z+9, r27	; 0x09
	Fifo->count = 0;
    1302:	e9 81       	ldd	r30, Y+1	; 0x01
    1304:	fa 81       	ldd	r31, Y+2	; 0x02
    1306:	12 86       	std	Z+10, r1	; 0x0a
    1308:	13 86       	std	Z+11, r1	; 0x0b
    130a:	14 86       	std	Z+12, r1	; 0x0c
    130c:	15 86       	std	Z+13, r1	; 0x0d
	return FIFO_NoError;
    130e:	80 e0       	ldi	r24, 0x00	; 0

}
    1310:	28 96       	adiw	r28, 0x08	; 8
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <FIFO_Enqueue>:

FIFO_Statues FIFO_Enqueue(FIFO_t* Fifo, DataType Item){
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <FIFO_Enqueue+0x6>
    1328:	00 d0       	rcall	.+0      	; 0x132a <FIFO_Enqueue+0x8>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	6b 83       	std	Y+3, r22	; 0x03

	//Check if exist
	if((Fifo->base==NULL)||(Fifo->head==NULL)||(Fifo->tail==NULL))
    1334:	e9 81       	ldd	r30, Y+1	; 0x01
    1336:	fa 81       	ldd	r31, Y+2	; 0x02
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	61 f0       	breq	.+24     	; 0x1358 <FIFO_Enqueue+0x36>
    1340:	e9 81       	ldd	r30, Y+1	; 0x01
    1342:	fa 81       	ldd	r31, Y+2	; 0x02
    1344:	84 81       	ldd	r24, Z+4	; 0x04
    1346:	95 81       	ldd	r25, Z+5	; 0x05
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	31 f0       	breq	.+12     	; 0x1358 <FIFO_Enqueue+0x36>
    134c:	e9 81       	ldd	r30, Y+1	; 0x01
    134e:	fa 81       	ldd	r31, Y+2	; 0x02
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	19 f4       	brne	.+6      	; 0x135e <FIFO_Enqueue+0x3c>
		return FIFO_NULL;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	8c 83       	std	Y+4, r24	; 0x04
    135c:	34 c0       	rjmp	.+104    	; 0x13c6 <FIFO_Enqueue+0xa4>

	//check if FUll
	if(Fifo->count == (Fifo->length * sizeof(DataType)))        //Ex: datatype size is 1 byte , Length  is 5 so if count ==  5 this mean we reach top.
    135e:	e9 81       	ldd	r30, Y+1	; 0x01
    1360:	fa 81       	ldd	r31, Y+2	; 0x02
    1362:	22 85       	ldd	r18, Z+10	; 0x0a
    1364:	33 85       	ldd	r19, Z+11	; 0x0b
    1366:	44 85       	ldd	r20, Z+12	; 0x0c
    1368:	55 85       	ldd	r21, Z+13	; 0x0d
    136a:	e9 81       	ldd	r30, Y+1	; 0x01
    136c:	fa 81       	ldd	r31, Y+2	; 0x02
    136e:	86 81       	ldd	r24, Z+6	; 0x06
    1370:	97 81       	ldd	r25, Z+7	; 0x07
    1372:	a0 85       	ldd	r26, Z+8	; 0x08
    1374:	b1 85       	ldd	r27, Z+9	; 0x09
    1376:	28 17       	cp	r18, r24
    1378:	39 07       	cpc	r19, r25
    137a:	4a 07       	cpc	r20, r26
    137c:	5b 07       	cpc	r21, r27
    137e:	19 f4       	brne	.+6      	; 0x1386 <FIFO_Enqueue+0x64>
		return FIFO_Full;
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	8c 83       	std	Y+4, r24	; 0x04
    1384:	20 c0       	rjmp	.+64     	; 0x13c6 <FIFO_Enqueue+0xa4>
	//Add Item
	*(Fifo->head) = Item;
    1386:	e9 81       	ldd	r30, Y+1	; 0x01
    1388:	fa 81       	ldd	r31, Y+2	; 0x02
    138a:	04 80       	ldd	r0, Z+4	; 0x04
    138c:	f5 81       	ldd	r31, Z+5	; 0x05
    138e:	e0 2d       	mov	r30, r0
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	80 83       	st	Z, r24
	Fifo->head++;
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	fa 81       	ldd	r31, Y+2	; 0x02
    1398:	84 81       	ldd	r24, Z+4	; 0x04
    139a:	95 81       	ldd	r25, Z+5	; 0x05
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	e9 81       	ldd	r30, Y+1	; 0x01
    13a0:	fa 81       	ldd	r31, Y+2	; 0x02
    13a2:	95 83       	std	Z+5, r25	; 0x05
    13a4:	84 83       	std	Z+4, r24	; 0x04
	Fifo->count++;
    13a6:	e9 81       	ldd	r30, Y+1	; 0x01
    13a8:	fa 81       	ldd	r31, Y+2	; 0x02
    13aa:	82 85       	ldd	r24, Z+10	; 0x0a
    13ac:	93 85       	ldd	r25, Z+11	; 0x0b
    13ae:	a4 85       	ldd	r26, Z+12	; 0x0c
    13b0:	b5 85       	ldd	r27, Z+13	; 0x0d
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	a1 1d       	adc	r26, r1
    13b6:	b1 1d       	adc	r27, r1
    13b8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ba:	fa 81       	ldd	r31, Y+2	; 0x02
    13bc:	82 87       	std	Z+10, r24	; 0x0a
    13be:	93 87       	std	Z+11, r25	; 0x0b
    13c0:	a4 87       	std	Z+12, r26	; 0x0c
    13c2:	b5 87       	std	Z+13, r27	; 0x0d

	return FIFO_NoError;
    13c4:	1c 82       	std	Y+4, r1	; 0x04
    13c6:	8c 81       	ldd	r24, Y+4	; 0x04

}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <FIFO_Dequeue>:

FIFO_Statues FIFO_Dequeue(FIFO_t* Fifo,DataType* Item){
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <FIFO_Dequeue+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <FIFO_Dequeue+0x8>
    13de:	0f 92       	push	r0
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	7c 83       	std	Y+4, r23	; 0x04
    13ea:	6b 83       	std	Y+3, r22	; 0x03

	//Check if exist
	if((Fifo->base==NULL)||(Fifo->head==NULL)||(Fifo->tail==NULL))
    13ec:	e9 81       	ldd	r30, Y+1	; 0x01
    13ee:	fa 81       	ldd	r31, Y+2	; 0x02
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	61 f0       	breq	.+24     	; 0x1410 <FIFO_Dequeue+0x3a>
    13f8:	e9 81       	ldd	r30, Y+1	; 0x01
    13fa:	fa 81       	ldd	r31, Y+2	; 0x02
    13fc:	84 81       	ldd	r24, Z+4	; 0x04
    13fe:	95 81       	ldd	r25, Z+5	; 0x05
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	31 f0       	breq	.+12     	; 0x1410 <FIFO_Dequeue+0x3a>
    1404:	e9 81       	ldd	r30, Y+1	; 0x01
    1406:	fa 81       	ldd	r31, Y+2	; 0x02
    1408:	82 81       	ldd	r24, Z+2	; 0x02
    140a:	93 81       	ldd	r25, Z+3	; 0x03
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	19 f4       	brne	.+6      	; 0x1416 <FIFO_Dequeue+0x40>
		return FIFO_NULL;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	8d 83       	std	Y+5, r24	; 0x05
    1414:	2f c0       	rjmp	.+94     	; 0x1474 <FIFO_Dequeue+0x9e>
	//check is empty or not
	if(Fifo->count==0)
    1416:	e9 81       	ldd	r30, Y+1	; 0x01
    1418:	fa 81       	ldd	r31, Y+2	; 0x02
    141a:	82 85       	ldd	r24, Z+10	; 0x0a
    141c:	93 85       	ldd	r25, Z+11	; 0x0b
    141e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1420:	b5 85       	ldd	r27, Z+13	; 0x0d
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	a1 05       	cpc	r26, r1
    1426:	b1 05       	cpc	r27, r1
    1428:	19 f4       	brne	.+6      	; 0x1430 <FIFO_Dequeue+0x5a>
		return FIFO_Empty;
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	8d 83       	std	Y+5, r24	; 0x05
    142e:	22 c0       	rjmp	.+68     	; 0x1474 <FIFO_Dequeue+0x9e>

	*Item = *(Fifo->tail);
    1430:	e9 81       	ldd	r30, Y+1	; 0x01
    1432:	fa 81       	ldd	r31, Y+2	; 0x02
    1434:	02 80       	ldd	r0, Z+2	; 0x02
    1436:	f3 81       	ldd	r31, Z+3	; 0x03
    1438:	e0 2d       	mov	r30, r0
    143a:	80 81       	ld	r24, Z
    143c:	eb 81       	ldd	r30, Y+3	; 0x03
    143e:	fc 81       	ldd	r31, Y+4	; 0x04
    1440:	80 83       	st	Z, r24
	Fifo->count--;
    1442:	e9 81       	ldd	r30, Y+1	; 0x01
    1444:	fa 81       	ldd	r31, Y+2	; 0x02
    1446:	82 85       	ldd	r24, Z+10	; 0x0a
    1448:	93 85       	ldd	r25, Z+11	; 0x0b
    144a:	a4 85       	ldd	r26, Z+12	; 0x0c
    144c:	b5 85       	ldd	r27, Z+13	; 0x0d
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	a1 09       	sbc	r26, r1
    1452:	b1 09       	sbc	r27, r1
    1454:	e9 81       	ldd	r30, Y+1	; 0x01
    1456:	fa 81       	ldd	r31, Y+2	; 0x02
    1458:	82 87       	std	Z+10, r24	; 0x0a
    145a:	93 87       	std	Z+11, r25	; 0x0b
    145c:	a4 87       	std	Z+12, r26	; 0x0c
    145e:	b5 87       	std	Z+13, r27	; 0x0d
	Fifo->tail++;
    1460:	e9 81       	ldd	r30, Y+1	; 0x01
    1462:	fa 81       	ldd	r31, Y+2	; 0x02
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	93 81       	ldd	r25, Z+3	; 0x03
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	e9 81       	ldd	r30, Y+1	; 0x01
    146c:	fa 81       	ldd	r31, Y+2	; 0x02
    146e:	93 83       	std	Z+3, r25	; 0x03
    1470:	82 83       	std	Z+2, r24	; 0x02
	return FIFO_NoError;
    1472:	1d 82       	std	Y+5, r1	; 0x05
    1474:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <FIFO_PrintAll>:

FIFO_Statues FIFO_PrintAll(FIFO_t* Fifo)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	28 97       	sbiw	r28, 0x08	; 8
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	9f 83       	std	Y+7, r25	; 0x07
    149c:	8e 83       	std	Y+6, r24	; 0x06

	DataType Temp;
	DataType* ptrtemp;  //temp pointer to the Fifo->tail as if we used the tail to navigate  to print that will damage our Fifo
	ptrtemp = Fifo->tail;
    149e:	ee 81       	ldd	r30, Y+6	; 0x06
    14a0:	ff 81       	ldd	r31, Y+7	; 0x07
    14a2:	82 81       	ldd	r24, Z+2	; 0x02
    14a4:	93 81       	ldd	r25, Z+3	; 0x03
    14a6:	9c 83       	std	Y+4, r25	; 0x04
    14a8:	8b 83       	std	Y+3, r24	; 0x03
	//Check if exist
	if((Fifo->base==NULL)||(Fifo->head==NULL)||(Fifo->tail==NULL))
    14aa:	ee 81       	ldd	r30, Y+6	; 0x06
    14ac:	ff 81       	ldd	r31, Y+7	; 0x07
    14ae:	80 81       	ld	r24, Z
    14b0:	91 81       	ldd	r25, Z+1	; 0x01
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	61 f0       	breq	.+24     	; 0x14ce <FIFO_PrintAll+0x48>
    14b6:	ee 81       	ldd	r30, Y+6	; 0x06
    14b8:	ff 81       	ldd	r31, Y+7	; 0x07
    14ba:	84 81       	ldd	r24, Z+4	; 0x04
    14bc:	95 81       	ldd	r25, Z+5	; 0x05
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	31 f0       	breq	.+12     	; 0x14ce <FIFO_PrintAll+0x48>
    14c2:	ee 81       	ldd	r30, Y+6	; 0x06
    14c4:	ff 81       	ldd	r31, Y+7	; 0x07
    14c6:	82 81       	ldd	r24, Z+2	; 0x02
    14c8:	93 81       	ldd	r25, Z+3	; 0x03
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	19 f4       	brne	.+6      	; 0x14d4 <FIFO_PrintAll+0x4e>
		return FIFO_NULL;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	88 87       	std	Y+8, r24	; 0x08
    14d2:	53 c0       	rjmp	.+166    	; 0x157a <FIFO_PrintAll+0xf4>
	//check is empty or not
	if(Fifo->count==0){
    14d4:	ee 81       	ldd	r30, Y+6	; 0x06
    14d6:	ff 81       	ldd	r31, Y+7	; 0x07
    14d8:	82 85       	ldd	r24, Z+10	; 0x0a
    14da:	93 85       	ldd	r25, Z+11	; 0x0b
    14dc:	a4 85       	ldd	r26, Z+12	; 0x0c
    14de:	b5 85       	ldd	r27, Z+13	; 0x0d
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	a1 05       	cpc	r26, r1
    14e4:	b1 05       	cpc	r27, r1
    14e6:	59 f4       	brne	.+22     	; 0x14fe <FIFO_PrintAll+0x78>
		printf("\t\tFifo is Empty\n");
    14e8:	80 e6       	ldi	r24, 0x60	; 96
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <puts>
		printf("================================================\n\n");
    14f0:	80 e7       	ldi	r24, 0x70	; 112
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <puts>

		return FIFO_Empty;}
    14f8:	82 e0       	ldi	r24, 0x02	; 2
    14fa:	88 87       	std	Y+8, r24	; 0x08
    14fc:	3e c0       	rjmp	.+124    	; 0x157a <FIFO_PrintAll+0xf4>
	printf("=================FIFO Data======================\n\n");
    14fe:	82 ea       	ldi	r24, 0xA2	; 162
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <puts>
	for(int j =0; j <Fifo->count;j++) //the condition is limited to the counts as it's an indicate to how many elements in the Fifo.
    1506:	1a 82       	std	Y+2, r1	; 0x02
    1508:	19 82       	std	Y+1, r1	; 0x01
    150a:	20 c0       	rjmp	.+64     	; 0x154c <FIFO_PrintAll+0xc6>
	{
		printf(" \t\t%d\n",*(ptrtemp)); // using temp pointer instead of Fifo->tail
    150c:	eb 81       	ldd	r30, Y+3	; 0x03
    150e:	fc 81       	ldd	r31, Y+4	; 0x04
    1510:	80 81       	ld	r24, Z
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	00 d0       	rcall	.+0      	; 0x1518 <FIFO_PrintAll+0x92>
    1518:	00 d0       	rcall	.+0      	; 0x151a <FIFO_PrintAll+0x94>
    151a:	ed b7       	in	r30, 0x3d	; 61
    151c:	fe b7       	in	r31, 0x3e	; 62
    151e:	31 96       	adiw	r30, 0x01	; 1
    1520:	84 ed       	ldi	r24, 0xD4	; 212
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
    1528:	33 83       	std	Z+3, r19	; 0x03
    152a:	22 83       	std	Z+2, r18	; 0x02
    152c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <printf>
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
		ptrtemp++;
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	9c 83       	std	Y+4, r25	; 0x04
    1540:	8b 83       	std	Y+3, r24	; 0x03
		printf("\t\tFifo is Empty\n");
		printf("================================================\n\n");

		return FIFO_Empty;}
	printf("=================FIFO Data======================\n\n");
	for(int j =0; j <Fifo->count;j++) //the condition is limited to the counts as it's an indicate to how many elements in the Fifo.
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	9a 81       	ldd	r25, Y+2	; 0x02
    1550:	9c 01       	movw	r18, r24
    1552:	44 27       	eor	r20, r20
    1554:	37 fd       	sbrc	r19, 7
    1556:	40 95       	com	r20
    1558:	54 2f       	mov	r21, r20
    155a:	ee 81       	ldd	r30, Y+6	; 0x06
    155c:	ff 81       	ldd	r31, Y+7	; 0x07
    155e:	82 85       	ldd	r24, Z+10	; 0x0a
    1560:	93 85       	ldd	r25, Z+11	; 0x0b
    1562:	a4 85       	ldd	r26, Z+12	; 0x0c
    1564:	b5 85       	ldd	r27, Z+13	; 0x0d
    1566:	28 17       	cp	r18, r24
    1568:	39 07       	cpc	r19, r25
    156a:	4a 07       	cpc	r20, r26
    156c:	5b 07       	cpc	r21, r27
    156e:	70 f2       	brcs	.-100    	; 0x150c <FIFO_PrintAll+0x86>
	{
		printf(" \t\t%d\n",*(ptrtemp)); // using temp pointer instead of Fifo->tail
		ptrtemp++;

	}
	printf("================================================\n\n");
    1570:	80 e7       	ldi	r24, 0x70	; 112
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <puts>

	return FIFO_NoError;
    1578:	18 86       	std	Y+8, r1	; 0x08
    157a:	88 85       	ldd	r24, Y+8	; 0x08

}
    157c:	28 96       	adiw	r28, 0x08	; 8
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <RTOS_voidStart>:
u8 Global_u8Task3 =0;
u8 Global_u8TaskFlags[TASKNUM];

STask_t System_Tasks[TASKNUM] = {{NULL}};
static void void_ISR(void);
void RTOS_voidStart() {
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62

	/*send ISR */
	TIMER0_voidSetCallBackFun(&void_schedular);
    1596:	83 e5       	ldi	r24, 0x53	; 83
    1598:	9b e0       	ldi	r25, 0x0B	; 11
    159a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <TIMER0_voidSetCallBackFun>
	/*Initial Timer 0*/
	TIMER0_voidInit();
    159e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <TIMER0_voidInit>
	/*Enable GIE*/
	GIE_voidEnable();
    15a2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GIE_voidEnable>

}
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <RTOS_voidNewTask>:

RTOS_ErrorStatus RTOS_voidNewTask(u16 copy_u16Periodicity, u8 copy_u8Priorty,
		void (*Pfunc)(void), u16 copy_u16FirstDelay) {
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	28 97       	sbiw	r28, 0x08	; 8
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	9a 83       	std	Y+2, r25	; 0x02
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	6b 83       	std	Y+3, r22	; 0x03
    15c6:	5d 83       	std	Y+5, r21	; 0x05
    15c8:	4c 83       	std	Y+4, r20	; 0x04
    15ca:	3f 83       	std	Y+7, r19	; 0x07
    15cc:	2e 83       	std	Y+6, r18	; 0x06

	/*check if priority is exist or not*/

	if (System_Tasks[copy_u8Priorty].PFunc == NULL) {
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	c9 01       	movw	r24, r18
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	82 1b       	sub	r24, r18
    15e4:	93 0b       	sbc	r25, r19
    15e6:	fc 01       	movw	r30, r24
    15e8:	ea 50       	subi	r30, 0x0A	; 10
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	80 81       	ld	r24, Z
    15ee:	91 81       	ldd	r25, Z+1	; 0x01
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <RTOS_voidNewTask+0x4a>
    15f4:	4d c0       	rjmp	.+154    	; 0x1690 <RTOS_voidNewTask+0xe4>
		System_Tasks[copy_u8Priorty].periodicity = copy_u16Periodicity;
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	c9 01       	movw	r24, r18
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	82 1b       	sub	r24, r18
    160c:	93 0b       	sbc	r25, r19
    160e:	fc 01       	movw	r30, r24
    1610:	ef 50       	subi	r30, 0x0F	; 15
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	91 83       	std	Z+1, r25	; 0x01
    161a:	80 83       	st	Z, r24
		System_Tasks[copy_u8Priorty].FirstDelay = copy_u16FirstDelay;
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	c9 01       	movw	r24, r18
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	82 1b       	sub	r24, r18
    1632:	93 0b       	sbc	r25, r19
    1634:	fc 01       	movw	r30, r24
    1636:	ed 50       	subi	r30, 0x0D	; 13
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	8e 81       	ldd	r24, Y+6	; 0x06
    163c:	9f 81       	ldd	r25, Y+7	; 0x07
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
		System_Tasks[copy_u8Priorty].PFunc = Pfunc;
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	c9 01       	movw	r24, r18
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	82 1b       	sub	r24, r18
    1658:	93 0b       	sbc	r25, r19
    165a:	fc 01       	movw	r30, r24
    165c:	ea 50       	subi	r30, 0x0A	; 10
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	9d 81       	ldd	r25, Y+5	; 0x05
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
		System_Tasks[copy_u8Priorty].state = RESUME_TASK;
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	c9 01       	movw	r24, r18
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	82 1b       	sub	r24, r18
    167e:	93 0b       	sbc	r25, r19
    1680:	fc 01       	movw	r30, r24
    1682:	eb 50       	subi	r30, 0x0B	; 11
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	80 83       	st	Z, r24
		return RTOS_NoError;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	88 87       	std	Y+8, r24	; 0x08
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <RTOS_voidNewTask+0xe6>
	}

	else {
		return RTOS_ErrorPririotyExist;
    1690:	18 86       	std	Y+8, r1	; 0x08
    1692:	88 85       	ldd	r24, Y+8	; 0x08
	}

}
    1694:	28 96       	adiw	r28, 0x08	; 8
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <void_schedular>:
 * ======================================================*/

/*=======================================================
 * =====================================================*/

void void_schedular(void) {
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	0f 92       	push	r0
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Ittirate = 0;
    16b0:	19 82       	std	Y+1, r1	; 0x01

	{
		/*check which task achieve the desired tick number*/
			for(Local_u8Ittirate =0 ; Local_u8Ittirate <TASKNUM ; Local_u8Ittirate++)
    16b2:	19 82       	std	Y+1, r1	; 0x01
    16b4:	8e c0       	rjmp	.+284    	; 0x17d2 <void_schedular+0x12c>
			{
				/*check if task suspended or not*/
				if(System_Tasks[Local_u8Ittirate].state==RESUME_TASK)
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	c9 01       	movw	r24, r18
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	82 1b       	sub	r24, r18
    16cc:	93 0b       	sbc	r25, r19
    16ce:	fc 01       	movw	r30, r24
    16d0:	eb 50       	subi	r30, 0x0B	; 11
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	09 f0       	breq	.+2      	; 0x16dc <void_schedular+0x36>
    16da:	78 c0       	rjmp	.+240    	; 0x17cc <void_schedular+0x126>
				{

					if(System_Tasks[Local_u8Ittirate].FirstDelay==0)
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	c9 01       	movw	r24, r18
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	82 1b       	sub	r24, r18
    16f2:	93 0b       	sbc	r25, r19
    16f4:	fc 01       	movw	r30, r24
    16f6:	ed 50       	subi	r30, 0x0D	; 13
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	09 f0       	breq	.+2      	; 0x1704 <void_schedular+0x5e>
    1702:	42 c0       	rjmp	.+132    	; 0x1788 <void_schedular+0xe2>
					{
						if(System_Tasks[Local_u8Ittirate].PFunc!=NULL)
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	c9 01       	movw	r24, r18
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	82 1b       	sub	r24, r18
    171a:	93 0b       	sbc	r25, r19
    171c:	fc 01       	movw	r30, r24
    171e:	ea 50       	subi	r30, 0x0A	; 10
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	09 f4       	brne	.+2      	; 0x172c <void_schedular+0x86>
    172a:	50 c0       	rjmp	.+160    	; 0x17cc <void_schedular+0x126>
						{
							System_Tasks[Local_u8Ittirate].FirstDelay = System_Tasks[Local_u8Ittirate].periodicity-1;
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	48 2f       	mov	r20, r24
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	c9 01       	movw	r24, r18
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	82 1b       	sub	r24, r18
    1748:	93 0b       	sbc	r25, r19
    174a:	fc 01       	movw	r30, r24
    174c:	ef 50       	subi	r30, 0x0F	; 15
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	80 81       	ld	r24, Z
    1752:	91 81       	ldd	r25, Z+1	; 0x01
    1754:	9c 01       	movw	r18, r24
    1756:	21 50       	subi	r18, 0x01	; 1
    1758:	30 40       	sbci	r19, 0x00	; 0
    175a:	ca 01       	movw	r24, r20
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	84 1b       	sub	r24, r20
    176a:	95 0b       	sbc	r25, r21
    176c:	fc 01       	movw	r30, r24
    176e:	ed 50       	subi	r30, 0x0D	; 13
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	31 83       	std	Z+1, r19	; 0x01
    1774:	20 83       	st	Z, r18

							Global_u8TaskFlags[Local_u8Ittirate]=1;
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	fc 01       	movw	r30, r24
    177e:	e8 5f       	subi	r30, 0xF8	; 248
    1780:	fe 4f       	sbci	r31, 0xFE	; 254
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	80 83       	st	Z, r24
    1786:	22 c0       	rjmp	.+68     	; 0x17cc <void_schedular+0x126>
						}

					}
					else
					{
						System_Tasks[Local_u8Ittirate].FirstDelay--;
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	c9 01       	movw	r24, r18
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	82 1b       	sub	r24, r18
    179e:	93 0b       	sbc	r25, r19
    17a0:	fc 01       	movw	r30, r24
    17a2:	ed 50       	subi	r30, 0x0D	; 13
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
    17aa:	ac 01       	movw	r20, r24
    17ac:	41 50       	subi	r20, 0x01	; 1
    17ae:	50 40       	sbci	r21, 0x00	; 0
    17b0:	c9 01       	movw	r24, r18
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	82 1b       	sub	r24, r18
    17c0:	93 0b       	sbc	r25, r19
    17c2:	fc 01       	movw	r30, r24
    17c4:	ed 50       	subi	r30, 0x0D	; 13
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	51 83       	std	Z+1, r21	; 0x01
    17ca:	40 83       	st	Z, r20

	u8 Local_u8Ittirate = 0;

	{
		/*check which task achieve the desired tick number*/
			for(Local_u8Ittirate =0 ; Local_u8Ittirate <TASKNUM ; Local_u8Ittirate++)
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	8f 5f       	subi	r24, 0xFF	; 255
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	83 30       	cpi	r24, 0x03	; 3
    17d6:	08 f4       	brcc	.+2      	; 0x17da <void_schedular+0x134>
    17d8:	6e cf       	rjmp	.-292    	; 0x16b6 <void_schedular+0x10>
			}


	}

}
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <Semaphore_voidBinaryCreate>:
/*======================================================================
 * 							Binary Semaphore
 * =====================================================================*/

Semaphore_ErrorState_enum Semaphore_voidBinaryCreate(Semaphore_Binary_t* semaphore,u8 Copy_u8InitialState)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <Semaphore_voidBinaryCreate+0x6>
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <Semaphore_voidBinaryCreate+0x8>
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <Semaphore_voidBinaryCreate+0xa>
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	9a 83       	std	Y+2, r25	; 0x02
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	6b 83       	std	Y+3, r22	; 0x03

	//check if semaphore exist
	if(semaphore!=NULL)
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	11 f1       	breq	.+68     	; 0x1842 <Semaphore_voidBinaryCreate+0x60>
	{
		switch(Copy_u8InitialState)
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	3e 83       	std	Y+6, r19	; 0x06
    1806:	2d 83       	std	Y+5, r18	; 0x05
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	91 05       	cpc	r25, r1
    1810:	31 f0       	breq	.+12     	; 0x181e <Semaphore_voidBinaryCreate+0x3c>
    1812:	2d 81       	ldd	r18, Y+5	; 0x05
    1814:	3e 81       	ldd	r19, Y+6	; 0x06
    1816:	22 30       	cpi	r18, 0x02	; 2
    1818:	31 05       	cpc	r19, r1
    181a:	51 f0       	breq	.+20     	; 0x1830 <Semaphore_voidBinaryCreate+0x4e>
    181c:	10 c0       	rjmp	.+32     	; 0x183e <Semaphore_voidBinaryCreate+0x5c>
		{
		case Available:
			semaphore->Value=1;
    181e:	e9 81       	ldd	r30, Y+1	; 0x01
    1820:	fa 81       	ldd	r31, Y+2	; 0x02
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	81 83       	std	Z+1, r24	; 0x01
			semaphore->State=Available;
    1826:	e9 81       	ldd	r30, Y+1	; 0x01
    1828:	fa 81       	ldd	r31, Y+2	; 0x02
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	80 83       	st	Z, r24
    182e:	07 c0       	rjmp	.+14     	; 0x183e <Semaphore_voidBinaryCreate+0x5c>
			break;
		case Not_Available:
			semaphore->Value=0;
    1830:	e9 81       	ldd	r30, Y+1	; 0x01
    1832:	fa 81       	ldd	r31, Y+2	; 0x02
    1834:	11 82       	std	Z+1, r1	; 0x01
			semaphore->State=Not_Available;
    1836:	e9 81       	ldd	r30, Y+1	; 0x01
    1838:	fa 81       	ldd	r31, Y+2	; 0x02
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	80 83       	st	Z, r24
			break;
		}

		return Pdpass;
    183e:	1c 82       	std	Y+4, r1	; 0x04
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <Semaphore_voidBinaryCreate+0x64>
	}

	else {
		return Pdfail;
    1842:	31 e0       	ldi	r19, 0x01	; 1
    1844:	3c 83       	std	Y+4, r19	; 0x04
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    1848:	26 96       	adiw	r28, 0x06	; 6
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <Semaphore_Binary_enuTake>:



Semaphore_ErrorState_enum Semaphore_Binary_enuTake(Semaphore_Binary_t* semaphore)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <Semaphore_Binary_enuTake+0x6>
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	9a 83       	std	Y+2, r25	; 0x02
    1868:	89 83       	std	Y+1, r24	; 0x01
	//check if semaphore available or not
	if(semaphore->State ==Available)
    186a:	e9 81       	ldd	r30, Y+1	; 0x01
    186c:	fa 81       	ldd	r31, Y+2	; 0x02
    186e:	80 81       	ld	r24, Z
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	49 f4       	brne	.+18     	; 0x1886 <Semaphore_Binary_enuTake+0x2c>
	{
		semaphore->Value = 0;
    1874:	e9 81       	ldd	r30, Y+1	; 0x01
    1876:	fa 81       	ldd	r31, Y+2	; 0x02
    1878:	11 82       	std	Z+1, r1	; 0x01
		semaphore->State = Not_Available;
    187a:	e9 81       	ldd	r30, Y+1	; 0x01
    187c:	fa 81       	ldd	r31, Y+2	; 0x02
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	80 83       	st	Z, r24
		return Pdpass;
    1882:	1b 82       	std	Y+3, r1	; 0x03
    1884:	02 c0       	rjmp	.+4      	; 0x188a <Semaphore_Binary_enuTake+0x30>
	}

	return Pdfail;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	8b 83       	std	Y+3, r24	; 0x03
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <Semaphore_Binary_enuGive>:
Semaphore_ErrorState_enum Semaphore_Binary_enuGive(Semaphore_Binary_t* semaphore)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <Semaphore_Binary_enuGive+0x6>
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01
	semaphore->Value = 1;
    18a6:	e9 81       	ldd	r30, Y+1	; 0x01
    18a8:	fa 81       	ldd	r31, Y+2	; 0x02
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	81 83       	std	Z+1, r24	; 0x01
	semaphore->State = Available;
    18ae:	e9 81       	ldd	r30, Y+1	; 0x01
    18b0:	fa 81       	ldd	r31, Y+2	; 0x02
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	80 83       	st	Z, r24
	return Pdpass;
    18b6:	80 e0       	ldi	r24, 0x00	; 0

}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <Semaphore_voidCounnterCreate>:
/*======================================================================
 * 							Counter Semaphore
 * =====================================================================*/

Semaphore_ErrorState_enum Semaphore_voidCounnterCreate(Semaphore_Counter_t*semaphore,u8 Copy_u8InitialValue)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <Semaphore_voidCounnterCreate+0x6>
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <Semaphore_voidCounnterCreate+0x8>
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	6b 83       	std	Y+3, r22	; 0x03
	if(semaphore!=NULL)
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	91 f0       	breq	.+36     	; 0x1900 <Semaphore_voidCounnterCreate+0x3e>
	{
		semaphore->Value = Copy_u8InitialValue;
    18dc:	e9 81       	ldd	r30, Y+1	; 0x01
    18de:	fa 81       	ldd	r31, Y+2	; 0x02
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	81 83       	std	Z+1, r24	; 0x01
		if(Copy_u8InitialValue==0)
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	88 23       	and	r24, r24
    18e8:	29 f4       	brne	.+10     	; 0x18f4 <Semaphore_voidCounnterCreate+0x32>
		{
			semaphore->State =Not_Available;
    18ea:	e9 81       	ldd	r30, Y+1	; 0x01
    18ec:	fa 81       	ldd	r31, Y+2	; 0x02
    18ee:	82 e0       	ldi	r24, 0x02	; 2
    18f0:	80 83       	st	Z, r24
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <Semaphore_voidCounnterCreate+0x3a>
		}
		else {
			semaphore->State =Available;
    18f4:	e9 81       	ldd	r30, Y+1	; 0x01
    18f6:	fa 81       	ldd	r31, Y+2	; 0x02
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	80 83       	st	Z, r24
		}

		return Pdpass;
    18fc:	1c 82       	std	Y+4, r1	; 0x04
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <Semaphore_voidCounnterCreate+0x42>
	}
	else
	{
		return Pdfail;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	8c 83       	std	Y+4, r24	; 0x04
    1904:	8c 81       	ldd	r24, Y+4	; 0x04

	}
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <Semaphore_Counter_enuTake>:

Semaphore_ErrorState_enum Semaphore_Counter_enuTake(Semaphore_Counter_t* semaphore)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <Semaphore_Counter_enuTake+0x6>
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	9a 83       	std	Y+2, r25	; 0x02
    1920:	89 83       	std	Y+1, r24	; 0x01
	return Pdfail;
    1922:	81 e0       	ldi	r24, 0x01	; 1
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <Semaphore_Counter_enuGive>:
Semaphore_ErrorState_enum Semaphore_Counter_enuGive(Semaphore_Counter_t* semaphore)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <Semaphore_Counter_enuGive+0x6>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01

	return Pdfail;
    193c:	81 e0       	ldi	r24, 0x01	; 1
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <TIMER0_voidInit>:

void (*GlobalPFunc)(void) = NULL;


/*Compare Match Value Handling by Interrupt*/
void TIMER0_voidInit(){
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62


	/*select mode to Compare Match Value*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
    1950:	a3 e5       	ldi	r26, 0x53	; 83
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e3 e5       	ldi	r30, 0x53	; 83
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	8f 7b       	andi	r24, 0xBF	; 191
    195c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    195e:	a3 e5       	ldi	r26, 0x53	; 83
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e3 e5       	ldi	r30, 0x53	; 83
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	88 60       	ori	r24, 0x08	; 8
    196a:	8c 93       	st	X, r24
	/*Select Pre-Scaler dev by 64*/
	//	Local_u8PrescalerMask |= PRE_SCALER_64;
	//	TCCR0|=Local_u8PrescalerMask;
	/*What happen on OCR0 --> Toggle*/
	CLR_BIT(TCCR0,TCCR0_COM00);
    196c:	a3 e5       	ldi	r26, 0x53	; 83
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e3 e5       	ldi	r30, 0x53	; 83
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8f 7e       	andi	r24, 0xEF	; 239
    1978:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM01);
    197a:	a3 e5       	ldi	r26, 0x53	; 83
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e3 e5       	ldi	r30, 0x53	; 83
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	8f 7d       	andi	r24, 0xDF	; 223
    1986:	8c 93       	st	X, r24
	/*Set the Compare Match Value*/
	OCR0 =Compare_Match_Value;
    1988:	ec e5       	ldi	r30, 0x5C	; 92
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	8d e7       	ldi	r24, 0x7D	; 125
    198e:	80 83       	st	Z, r24
	/*Enable Compare Match value Interrupt*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
    1990:	a9 e5       	ldi	r26, 0x59	; 89
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e9 e5       	ldi	r30, 0x59	; 89
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	82 60       	ori	r24, 0x02	; 2
    199c:	8c 93       	st	X, r24
	//	u8 Local_u8PrescalerMask = 0;
	SET_BIT(TCCR0,TCCR0_CS00);
    199e:	a3 e5       	ldi	r26, 0x53	; 83
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e3 e5       	ldi	r30, 0x53	; 83
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	81 60       	ori	r24, 0x01	; 1
    19aa:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    19ac:	a3 e5       	ldi	r26, 0x53	; 83
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e3 e5       	ldi	r30, 0x53	; 83
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	82 60       	ori	r24, 0x02	; 2
    19b8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    19ba:	a3 e5       	ldi	r26, 0x53	; 83
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e3 e5       	ldi	r30, 0x53	; 83
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	8b 7f       	andi	r24, 0xFB	; 251
    19c6:	8c 93       	st	X, r24


}
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <TIMER0_voidSetCallBackFun>:

/**/
void TIMER0_voidSetCallBackFun(void(*pFun)(void)){
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <TIMER0_voidSetCallBackFun+0x6>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01


	GlobalPFunc = pFun;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	90 93 07 01 	sts	0x0107, r25
    19e4:	80 93 06 01 	sts	0x0106, r24

}
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <__vector_10>:



void __vector_10(void) __attribute__((signal)); /*attribute is a message from complier to the optimizer of linker to tell it that  its an interrupt signal*/
void __vector_10(void)
{
    19f2:	1f 92       	push	r1
    19f4:	0f 92       	push	r0
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	0f 92       	push	r0
    19fa:	11 24       	eor	r1, r1
    19fc:	2f 93       	push	r18
    19fe:	3f 93       	push	r19
    1a00:	4f 93       	push	r20
    1a02:	5f 93       	push	r21
    1a04:	6f 93       	push	r22
    1a06:	7f 93       	push	r23
    1a08:	8f 93       	push	r24
    1a0a:	9f 93       	push	r25
    1a0c:	af 93       	push	r26
    1a0e:	bf 93       	push	r27
    1a10:	ef 93       	push	r30
    1a12:	ff 93       	push	r31
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
	GlobalPFunc();
    1a1c:	e0 91 06 01 	lds	r30, 0x0106
    1a20:	f0 91 07 01 	lds	r31, 0x0107
    1a24:	09 95       	icall
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	ff 91       	pop	r31
    1a2c:	ef 91       	pop	r30
    1a2e:	bf 91       	pop	r27
    1a30:	af 91       	pop	r26
    1a32:	9f 91       	pop	r25
    1a34:	8f 91       	pop	r24
    1a36:	7f 91       	pop	r23
    1a38:	6f 91       	pop	r22
    1a3a:	5f 91       	pop	r21
    1a3c:	4f 91       	pop	r20
    1a3e:	3f 91       	pop	r19
    1a40:	2f 91       	pop	r18
    1a42:	0f 90       	pop	r0
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	0f 90       	pop	r0
    1a48:	1f 90       	pop	r1
    1a4a:	18 95       	reti

00001a4c <main>:
void (*Pfunc[3])(void) = {LED1,LED2,LED3};



void main(void)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	0f 92       	push	r0
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Itter;
	PORT_voidInit();
    1a56:	0e 94 2f 09 	call	0x125e	; 0x125e <PORT_voidInit>
	RTOS_voidNewTask(10,0,&LED1,0);
    1a5a:	22 e7       	ldi	r18, 0x72	; 114
    1a5c:	3d e0       	ldi	r19, 0x0D	; 13
    1a5e:	8a e0       	ldi	r24, 0x0A	; 10
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	a9 01       	movw	r20, r18
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <RTOS_voidNewTask>
	RTOS_voidNewTask(5,1,&LED2,0);
    1a6e:	24 e0       	ldi	r18, 0x04	; 4
    1a70:	3e e0       	ldi	r19, 0x0E	; 14
    1a72:	85 e0       	ldi	r24, 0x05	; 5
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	a9 01       	movw	r20, r18
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <RTOS_voidNewTask>
	RTOS_voidNewTask(30,2,&LED3,0);
    1a82:	28 e1       	ldi	r18, 0x18	; 24
    1a84:	3e e0       	ldi	r19, 0x0E	; 14
    1a86:	8e e1       	ldi	r24, 0x1E	; 30
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	62 e0       	ldi	r22, 0x02	; 2
    1a8c:	a9 01       	movw	r20, r18
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <RTOS_voidNewTask>
	RTOS_voidStart();
    1a96:	0e 94 c7 0a 	call	0x158e	; 0x158e <RTOS_voidStart>


	while(1){


		for(Local_u8Itter=0;Local_u8Itter<3;Local_u8Itter++)
    1a9a:	19 82       	std	Y+1, r1	; 0x01
    1a9c:	1f c0       	rjmp	.+62     	; 0x1adc <main+0x90>
		{
			if (Global_u8TaskFlags[Local_u8Itter]==1)
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	e8 5f       	subi	r30, 0xF8	; 248
    1aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aaa:	80 81       	ld	r24, Z
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	99 f4       	brne	.+38     	; 0x1ad6 <main+0x8a>
			{
				Global_u8TaskFlags[Local_u8Itter]=0;
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	e8 5f       	subi	r30, 0xF8	; 248
    1aba:	fe 4f       	sbci	r31, 0xFE	; 254
    1abc:	10 82       	st	Z, r1
				Pfunc[Local_u8Itter]();
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	fc 01       	movw	r30, r24
    1aca:	ed 51       	subi	r30, 0x1D	; 29
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	01 90       	ld	r0, Z+
    1ad0:	f0 81       	ld	r31, Z
    1ad2:	e0 2d       	mov	r30, r0
    1ad4:	09 95       	icall


	while(1){


		for(Local_u8Itter=0;Local_u8Itter<3;Local_u8Itter++)
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	8f 5f       	subi	r24, 0xFF	; 255
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	83 30       	cpi	r24, 0x03	; 3
    1ae0:	f0 f2       	brcs	.-68     	; 0x1a9e <main+0x52>
    1ae2:	db cf       	rjmp	.-74     	; 0x1a9a <main+0x4e>

00001ae4 <LED1>:


}

void LED1()
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	2e 97       	sbiw	r28, 0x0e	; 14
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61

	static u8 Local_u8PinStat=1;
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN5,Local_u8PinStat);
    1af8:	90 91 e9 00 	lds	r25, 0x00E9
    1afc:	83 e0       	ldi	r24, 0x03	; 3
    1afe:	65 e0       	ldi	r22, 0x05	; 5
    1b00:	49 2f       	mov	r20, r25
    1b02:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	aa e7       	ldi	r26, 0x7A	; 122
    1b0c:	b5 e4       	ldi	r27, 0x45	; 69
    1b0e:	8b 87       	std	Y+11, r24	; 0x0b
    1b10:	9c 87       	std	Y+12, r25	; 0x0c
    1b12:	ad 87       	std	Y+13, r26	; 0x0d
    1b14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a ef       	ldi	r20, 0xFA	; 250
    1b24:	54 e4       	ldi	r21, 0x44	; 68
    1b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	8f 83       	std	Y+7, r24	; 0x07
    1b30:	98 87       	std	Y+8, r25	; 0x08
    1b32:	a9 87       	std	Y+9, r26	; 0x09
    1b34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b36:	6f 81       	ldd	r22, Y+7	; 0x07
    1b38:	78 85       	ldd	r23, Y+8	; 0x08
    1b3a:	89 85       	ldd	r24, Y+9	; 0x09
    1b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <LED1+0x74>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	3f c0       	rjmp	.+126    	; 0x1bd6 <LED1+0xf2>
	else if (__tmp > 65535)
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	4c f5       	brge	.+82     	; 0x1bc2 <LED1+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e2       	ldi	r20, 0x20	; 32
    1b7e:	51 e4       	ldi	r21, 0x41	; 65
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9e 83       	std	Y+6, r25	; 0x06
    1b96:	8d 83       	std	Y+5, r24	; 0x05
    1b98:	0f c0       	rjmp	.+30     	; 0x1bb8 <LED1+0xd4>
    1b9a:	88 ec       	ldi	r24, 0xC8	; 200
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9c 83       	std	Y+4, r25	; 0x04
    1ba0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LED1+0xc2>
    1baa:	9c 83       	std	Y+4, r25	; 0x04
    1bac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	69 f7       	brne	.-38     	; 0x1b9a <LED1+0xb6>
    1bc0:	14 c0       	rjmp	.+40     	; 0x1bea <LED1+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc4:	78 85       	ldd	r23, Y+8	; 0x08
    1bc6:	89 85       	ldd	r24, Y+9	; 0x09
    1bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	9a 83       	std	Y+2, r25	; 0x02
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LED1+0xfe>
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4000);
	Local_u8PinStat^=1;
    1bea:	80 91 e9 00 	lds	r24, 0x00E9
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	89 27       	eor	r24, r25
    1bf2:	80 93 e9 00 	sts	0x00E9, r24
}
    1bf6:	2e 96       	adiw	r28, 0x0e	; 14
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <LED2>:

void LED2()
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8PinStat=1;
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,Local_u8PinStat);
    1c10:	90 91 ea 00 	lds	r25, 0x00EA
    1c14:	83 e0       	ldi	r24, 0x03	; 3
    1c16:	66 e0       	ldi	r22, 0x06	; 6
    1c18:	49 2f       	mov	r20, r25
    1c1a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>
	Local_u8PinStat^=1;
    1c1e:	90 91 ea 00 	lds	r25, 0x00EA
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	89 27       	eor	r24, r25
    1c26:	80 93 ea 00 	sts	0x00EA, r24

}
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <LED3>:
void LED3()
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8PinStat=1;
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,Local_u8PinStat);
    1c38:	90 91 eb 00 	lds	r25, 0x00EB
    1c3c:	83 e0       	ldi	r24, 0x03	; 3
    1c3e:	67 e0       	ldi	r22, 0x07	; 7
    1c40:	49 2f       	mov	r20, r25
    1c42:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinValue>
	Local_u8PinStat^=1;
    1c46:	90 91 eb 00 	lds	r25, 0x00EB
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	89 27       	eor	r24, r25
    1c4e:	80 93 eb 00 	sts	0x00EB, r24
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <__prologue_saves__>:
    1c58:	2f 92       	push	r2
    1c5a:	3f 92       	push	r3
    1c5c:	4f 92       	push	r4
    1c5e:	5f 92       	push	r5
    1c60:	6f 92       	push	r6
    1c62:	7f 92       	push	r7
    1c64:	8f 92       	push	r8
    1c66:	9f 92       	push	r9
    1c68:	af 92       	push	r10
    1c6a:	bf 92       	push	r11
    1c6c:	cf 92       	push	r12
    1c6e:	df 92       	push	r13
    1c70:	ef 92       	push	r14
    1c72:	ff 92       	push	r15
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	ca 1b       	sub	r28, r26
    1c82:	db 0b       	sbc	r29, r27
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	09 94       	ijmp

00001c90 <__epilogue_restores__>:
    1c90:	2a 88       	ldd	r2, Y+18	; 0x12
    1c92:	39 88       	ldd	r3, Y+17	; 0x11
    1c94:	48 88       	ldd	r4, Y+16	; 0x10
    1c96:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c98:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ca0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ca2:	b9 84       	ldd	r11, Y+9	; 0x09
    1ca4:	c8 84       	ldd	r12, Y+8	; 0x08
    1ca6:	df 80       	ldd	r13, Y+7	; 0x07
    1ca8:	ee 80       	ldd	r14, Y+6	; 0x06
    1caa:	fd 80       	ldd	r15, Y+5	; 0x05
    1cac:	0c 81       	ldd	r16, Y+4	; 0x04
    1cae:	1b 81       	ldd	r17, Y+3	; 0x03
    1cb0:	aa 81       	ldd	r26, Y+2	; 0x02
    1cb2:	b9 81       	ldd	r27, Y+1	; 0x01
    1cb4:	ce 0f       	add	r28, r30
    1cb6:	d1 1d       	adc	r29, r1
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	ed 01       	movw	r28, r26
    1cc4:	08 95       	ret

00001cc6 <printf>:
    1cc6:	a0 e0       	ldi	r26, 0x00	; 0
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e9 e6       	ldi	r30, 0x69	; 105
    1ccc:	fe e0       	ldi	r31, 0x0E	; 14
    1cce:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__prologue_saves__+0x20>
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	35 96       	adiw	r30, 0x05	; 5
    1cd6:	61 91       	ld	r22, Z+
    1cd8:	71 91       	ld	r23, Z+
    1cda:	80 91 0d 01 	lds	r24, 0x010D
    1cde:	90 91 0e 01 	lds	r25, 0x010E
    1ce2:	af 01       	movw	r20, r30
    1ce4:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <vfprintf>
    1ce8:	20 96       	adiw	r28, 0x00	; 0
    1cea:	e2 e0       	ldi	r30, 0x02	; 2
    1cec:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__epilogue_restores__+0x20>

00001cf0 <puts>:
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	8c 01       	movw	r16, r24
    1cfa:	e0 91 0d 01 	lds	r30, 0x010D
    1cfe:	f0 91 0e 01 	lds	r31, 0x010E
    1d02:	83 81       	ldd	r24, Z+3	; 0x03
    1d04:	81 ff       	sbrs	r24, 1
    1d06:	21 c0       	rjmp	.+66     	; 0x1d4a <puts+0x5a>
    1d08:	c0 e0       	ldi	r28, 0x00	; 0
    1d0a:	d0 e0       	ldi	r29, 0x00	; 0
    1d0c:	0d c0       	rjmp	.+26     	; 0x1d28 <puts+0x38>
    1d0e:	e0 91 0d 01 	lds	r30, 0x010D
    1d12:	f0 91 0e 01 	lds	r31, 0x010E
    1d16:	20 85       	ldd	r18, Z+8	; 0x08
    1d18:	31 85       	ldd	r19, Z+9	; 0x09
    1d1a:	bf 01       	movw	r22, r30
    1d1c:	f9 01       	movw	r30, r18
    1d1e:	09 95       	icall
    1d20:	89 2b       	or	r24, r25
    1d22:	11 f0       	breq	.+4      	; 0x1d28 <puts+0x38>
    1d24:	cf ef       	ldi	r28, 0xFF	; 255
    1d26:	df ef       	ldi	r29, 0xFF	; 255
    1d28:	f8 01       	movw	r30, r16
    1d2a:	81 91       	ld	r24, Z+
    1d2c:	8f 01       	movw	r16, r30
    1d2e:	88 23       	and	r24, r24
    1d30:	71 f7       	brne	.-36     	; 0x1d0e <puts+0x1e>
    1d32:	e0 91 0d 01 	lds	r30, 0x010D
    1d36:	f0 91 0e 01 	lds	r31, 0x010E
    1d3a:	20 85       	ldd	r18, Z+8	; 0x08
    1d3c:	31 85       	ldd	r19, Z+9	; 0x09
    1d3e:	8a e0       	ldi	r24, 0x0A	; 10
    1d40:	bf 01       	movw	r22, r30
    1d42:	f9 01       	movw	r30, r18
    1d44:	09 95       	icall
    1d46:	89 2b       	or	r24, r25
    1d48:	11 f0       	breq	.+4      	; 0x1d4e <puts+0x5e>
    1d4a:	cf ef       	ldi	r28, 0xFF	; 255
    1d4c:	df ef       	ldi	r29, 0xFF	; 255
    1d4e:	ce 01       	movw	r24, r28
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	08 95       	ret

00001d5a <vfprintf>:
    1d5a:	ab e0       	ldi	r26, 0x0B	; 11
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e3 eb       	ldi	r30, 0xB3	; 179
    1d60:	fe e0       	ldi	r31, 0x0E	; 14
    1d62:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__prologue_saves__>
    1d66:	3c 01       	movw	r6, r24
    1d68:	2b 01       	movw	r4, r22
    1d6a:	5a 01       	movw	r10, r20
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	17 82       	std	Z+7, r1	; 0x07
    1d70:	16 82       	std	Z+6, r1	; 0x06
    1d72:	83 81       	ldd	r24, Z+3	; 0x03
    1d74:	81 fd       	sbrc	r24, 1
    1d76:	03 c0       	rjmp	.+6      	; 0x1d7e <vfprintf+0x24>
    1d78:	6f ef       	ldi	r22, 0xFF	; 255
    1d7a:	7f ef       	ldi	r23, 0xFF	; 255
    1d7c:	c6 c1       	rjmp	.+908    	; 0x210a <vfprintf+0x3b0>
    1d7e:	9a e0       	ldi	r25, 0x0A	; 10
    1d80:	89 2e       	mov	r8, r25
    1d82:	1e 01       	movw	r2, r28
    1d84:	08 94       	sec
    1d86:	21 1c       	adc	r2, r1
    1d88:	31 1c       	adc	r3, r1
    1d8a:	f3 01       	movw	r30, r6
    1d8c:	23 81       	ldd	r18, Z+3	; 0x03
    1d8e:	f2 01       	movw	r30, r4
    1d90:	23 fd       	sbrc	r18, 3
    1d92:	85 91       	lpm	r24, Z+
    1d94:	23 ff       	sbrs	r18, 3
    1d96:	81 91       	ld	r24, Z+
    1d98:	2f 01       	movw	r4, r30
    1d9a:	88 23       	and	r24, r24
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <vfprintf+0x46>
    1d9e:	b2 c1       	rjmp	.+868    	; 0x2104 <vfprintf+0x3aa>
    1da0:	85 32       	cpi	r24, 0x25	; 37
    1da2:	39 f4       	brne	.+14     	; 0x1db2 <vfprintf+0x58>
    1da4:	23 fd       	sbrc	r18, 3
    1da6:	85 91       	lpm	r24, Z+
    1da8:	23 ff       	sbrs	r18, 3
    1daa:	81 91       	ld	r24, Z+
    1dac:	2f 01       	movw	r4, r30
    1dae:	85 32       	cpi	r24, 0x25	; 37
    1db0:	29 f4       	brne	.+10     	; 0x1dbc <vfprintf+0x62>
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	b3 01       	movw	r22, r6
    1db6:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1dba:	e7 cf       	rjmp	.-50     	; 0x1d8a <vfprintf+0x30>
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	ff 24       	eor	r15, r15
    1dc0:	ee 24       	eor	r14, r14
    1dc2:	99 24       	eor	r9, r9
    1dc4:	ff e1       	ldi	r31, 0x1F	; 31
    1dc6:	ff 15       	cp	r31, r15
    1dc8:	d0 f0       	brcs	.+52     	; 0x1dfe <vfprintf+0xa4>
    1dca:	9b 32       	cpi	r25, 0x2B	; 43
    1dcc:	69 f0       	breq	.+26     	; 0x1de8 <vfprintf+0x8e>
    1dce:	9c 32       	cpi	r25, 0x2C	; 44
    1dd0:	28 f4       	brcc	.+10     	; 0x1ddc <vfprintf+0x82>
    1dd2:	90 32       	cpi	r25, 0x20	; 32
    1dd4:	59 f0       	breq	.+22     	; 0x1dec <vfprintf+0x92>
    1dd6:	93 32       	cpi	r25, 0x23	; 35
    1dd8:	91 f4       	brne	.+36     	; 0x1dfe <vfprintf+0xa4>
    1dda:	0e c0       	rjmp	.+28     	; 0x1df8 <vfprintf+0x9e>
    1ddc:	9d 32       	cpi	r25, 0x2D	; 45
    1dde:	49 f0       	breq	.+18     	; 0x1df2 <vfprintf+0x98>
    1de0:	90 33       	cpi	r25, 0x30	; 48
    1de2:	69 f4       	brne	.+26     	; 0x1dfe <vfprintf+0xa4>
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	24 c0       	rjmp	.+72     	; 0x1e30 <vfprintf+0xd6>
    1de8:	52 e0       	ldi	r21, 0x02	; 2
    1dea:	f5 2a       	or	r15, r21
    1dec:	84 e0       	ldi	r24, 0x04	; 4
    1dee:	f8 2a       	or	r15, r24
    1df0:	28 c0       	rjmp	.+80     	; 0x1e42 <vfprintf+0xe8>
    1df2:	98 e0       	ldi	r25, 0x08	; 8
    1df4:	f9 2a       	or	r15, r25
    1df6:	25 c0       	rjmp	.+74     	; 0x1e42 <vfprintf+0xe8>
    1df8:	e0 e1       	ldi	r30, 0x10	; 16
    1dfa:	fe 2a       	or	r15, r30
    1dfc:	22 c0       	rjmp	.+68     	; 0x1e42 <vfprintf+0xe8>
    1dfe:	f7 fc       	sbrc	r15, 7
    1e00:	29 c0       	rjmp	.+82     	; 0x1e54 <vfprintf+0xfa>
    1e02:	89 2f       	mov	r24, r25
    1e04:	80 53       	subi	r24, 0x30	; 48
    1e06:	8a 30       	cpi	r24, 0x0A	; 10
    1e08:	70 f4       	brcc	.+28     	; 0x1e26 <vfprintf+0xcc>
    1e0a:	f6 fe       	sbrs	r15, 6
    1e0c:	05 c0       	rjmp	.+10     	; 0x1e18 <vfprintf+0xbe>
    1e0e:	98 9c       	mul	r9, r8
    1e10:	90 2c       	mov	r9, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	98 0e       	add	r9, r24
    1e16:	15 c0       	rjmp	.+42     	; 0x1e42 <vfprintf+0xe8>
    1e18:	e8 9c       	mul	r14, r8
    1e1a:	e0 2c       	mov	r14, r0
    1e1c:	11 24       	eor	r1, r1
    1e1e:	e8 0e       	add	r14, r24
    1e20:	f0 e2       	ldi	r31, 0x20	; 32
    1e22:	ff 2a       	or	r15, r31
    1e24:	0e c0       	rjmp	.+28     	; 0x1e42 <vfprintf+0xe8>
    1e26:	9e 32       	cpi	r25, 0x2E	; 46
    1e28:	29 f4       	brne	.+10     	; 0x1e34 <vfprintf+0xda>
    1e2a:	f6 fc       	sbrc	r15, 6
    1e2c:	6b c1       	rjmp	.+726    	; 0x2104 <vfprintf+0x3aa>
    1e2e:	40 e4       	ldi	r20, 0x40	; 64
    1e30:	f4 2a       	or	r15, r20
    1e32:	07 c0       	rjmp	.+14     	; 0x1e42 <vfprintf+0xe8>
    1e34:	9c 36       	cpi	r25, 0x6C	; 108
    1e36:	19 f4       	brne	.+6      	; 0x1e3e <vfprintf+0xe4>
    1e38:	50 e8       	ldi	r21, 0x80	; 128
    1e3a:	f5 2a       	or	r15, r21
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <vfprintf+0xe8>
    1e3e:	98 36       	cpi	r25, 0x68	; 104
    1e40:	49 f4       	brne	.+18     	; 0x1e54 <vfprintf+0xfa>
    1e42:	f2 01       	movw	r30, r4
    1e44:	23 fd       	sbrc	r18, 3
    1e46:	95 91       	lpm	r25, Z+
    1e48:	23 ff       	sbrs	r18, 3
    1e4a:	91 91       	ld	r25, Z+
    1e4c:	2f 01       	movw	r4, r30
    1e4e:	99 23       	and	r25, r25
    1e50:	09 f0       	breq	.+2      	; 0x1e54 <vfprintf+0xfa>
    1e52:	b8 cf       	rjmp	.-144    	; 0x1dc4 <vfprintf+0x6a>
    1e54:	89 2f       	mov	r24, r25
    1e56:	85 54       	subi	r24, 0x45	; 69
    1e58:	83 30       	cpi	r24, 0x03	; 3
    1e5a:	18 f0       	brcs	.+6      	; 0x1e62 <vfprintf+0x108>
    1e5c:	80 52       	subi	r24, 0x20	; 32
    1e5e:	83 30       	cpi	r24, 0x03	; 3
    1e60:	38 f4       	brcc	.+14     	; 0x1e70 <vfprintf+0x116>
    1e62:	44 e0       	ldi	r20, 0x04	; 4
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	a4 0e       	add	r10, r20
    1e68:	b5 1e       	adc	r11, r21
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	59 83       	std	Y+1, r21	; 0x01
    1e6e:	0f c0       	rjmp	.+30     	; 0x1e8e <vfprintf+0x134>
    1e70:	93 36       	cpi	r25, 0x63	; 99
    1e72:	31 f0       	breq	.+12     	; 0x1e80 <vfprintf+0x126>
    1e74:	93 37       	cpi	r25, 0x73	; 115
    1e76:	79 f0       	breq	.+30     	; 0x1e96 <vfprintf+0x13c>
    1e78:	93 35       	cpi	r25, 0x53	; 83
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <vfprintf+0x124>
    1e7c:	56 c0       	rjmp	.+172    	; 0x1f2a <vfprintf+0x1d0>
    1e7e:	20 c0       	rjmp	.+64     	; 0x1ec0 <vfprintf+0x166>
    1e80:	f5 01       	movw	r30, r10
    1e82:	80 81       	ld	r24, Z
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	42 e0       	ldi	r20, 0x02	; 2
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	a4 0e       	add	r10, r20
    1e8c:	b5 1e       	adc	r11, r21
    1e8e:	61 01       	movw	r12, r2
    1e90:	01 e0       	ldi	r16, 0x01	; 1
    1e92:	10 e0       	ldi	r17, 0x00	; 0
    1e94:	12 c0       	rjmp	.+36     	; 0x1eba <vfprintf+0x160>
    1e96:	f5 01       	movw	r30, r10
    1e98:	c0 80       	ld	r12, Z
    1e9a:	d1 80       	ldd	r13, Z+1	; 0x01
    1e9c:	f6 fc       	sbrc	r15, 6
    1e9e:	03 c0       	rjmp	.+6      	; 0x1ea6 <vfprintf+0x14c>
    1ea0:	6f ef       	ldi	r22, 0xFF	; 255
    1ea2:	7f ef       	ldi	r23, 0xFF	; 255
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <vfprintf+0x150>
    1ea6:	69 2d       	mov	r22, r9
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	42 e0       	ldi	r20, 0x02	; 2
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	a4 0e       	add	r10, r20
    1eb0:	b5 1e       	adc	r11, r21
    1eb2:	c6 01       	movw	r24, r12
    1eb4:	0e 94 95 10 	call	0x212a	; 0x212a <strnlen>
    1eb8:	8c 01       	movw	r16, r24
    1eba:	5f e7       	ldi	r21, 0x7F	; 127
    1ebc:	f5 22       	and	r15, r21
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <vfprintf+0x18e>
    1ec0:	f5 01       	movw	r30, r10
    1ec2:	c0 80       	ld	r12, Z
    1ec4:	d1 80       	ldd	r13, Z+1	; 0x01
    1ec6:	f6 fc       	sbrc	r15, 6
    1ec8:	03 c0       	rjmp	.+6      	; 0x1ed0 <vfprintf+0x176>
    1eca:	6f ef       	ldi	r22, 0xFF	; 255
    1ecc:	7f ef       	ldi	r23, 0xFF	; 255
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <vfprintf+0x17a>
    1ed0:	69 2d       	mov	r22, r9
    1ed2:	70 e0       	ldi	r23, 0x00	; 0
    1ed4:	42 e0       	ldi	r20, 0x02	; 2
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	a4 0e       	add	r10, r20
    1eda:	b5 1e       	adc	r11, r21
    1edc:	c6 01       	movw	r24, r12
    1ede:	0e 94 8a 10 	call	0x2114	; 0x2114 <strnlen_P>
    1ee2:	8c 01       	movw	r16, r24
    1ee4:	50 e8       	ldi	r21, 0x80	; 128
    1ee6:	f5 2a       	or	r15, r21
    1ee8:	f3 fe       	sbrs	r15, 3
    1eea:	07 c0       	rjmp	.+14     	; 0x1efa <vfprintf+0x1a0>
    1eec:	1a c0       	rjmp	.+52     	; 0x1f22 <vfprintf+0x1c8>
    1eee:	80 e2       	ldi	r24, 0x20	; 32
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	b3 01       	movw	r22, r6
    1ef4:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1ef8:	ea 94       	dec	r14
    1efa:	8e 2d       	mov	r24, r14
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	08 17       	cp	r16, r24
    1f00:	19 07       	cpc	r17, r25
    1f02:	a8 f3       	brcs	.-22     	; 0x1eee <vfprintf+0x194>
    1f04:	0e c0       	rjmp	.+28     	; 0x1f22 <vfprintf+0x1c8>
    1f06:	f6 01       	movw	r30, r12
    1f08:	f7 fc       	sbrc	r15, 7
    1f0a:	85 91       	lpm	r24, Z+
    1f0c:	f7 fe       	sbrs	r15, 7
    1f0e:	81 91       	ld	r24, Z+
    1f10:	6f 01       	movw	r12, r30
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	b3 01       	movw	r22, r6
    1f16:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1f1a:	e1 10       	cpse	r14, r1
    1f1c:	ea 94       	dec	r14
    1f1e:	01 50       	subi	r16, 0x01	; 1
    1f20:	10 40       	sbci	r17, 0x00	; 0
    1f22:	01 15       	cp	r16, r1
    1f24:	11 05       	cpc	r17, r1
    1f26:	79 f7       	brne	.-34     	; 0x1f06 <vfprintf+0x1ac>
    1f28:	ea c0       	rjmp	.+468    	; 0x20fe <vfprintf+0x3a4>
    1f2a:	94 36       	cpi	r25, 0x64	; 100
    1f2c:	11 f0       	breq	.+4      	; 0x1f32 <vfprintf+0x1d8>
    1f2e:	99 36       	cpi	r25, 0x69	; 105
    1f30:	69 f5       	brne	.+90     	; 0x1f8c <vfprintf+0x232>
    1f32:	f7 fe       	sbrs	r15, 7
    1f34:	08 c0       	rjmp	.+16     	; 0x1f46 <vfprintf+0x1ec>
    1f36:	f5 01       	movw	r30, r10
    1f38:	20 81       	ld	r18, Z
    1f3a:	31 81       	ldd	r19, Z+1	; 0x01
    1f3c:	42 81       	ldd	r20, Z+2	; 0x02
    1f3e:	53 81       	ldd	r21, Z+3	; 0x03
    1f40:	84 e0       	ldi	r24, 0x04	; 4
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0a c0       	rjmp	.+20     	; 0x1f5a <vfprintf+0x200>
    1f46:	f5 01       	movw	r30, r10
    1f48:	80 81       	ld	r24, Z
    1f4a:	91 81       	ldd	r25, Z+1	; 0x01
    1f4c:	9c 01       	movw	r18, r24
    1f4e:	44 27       	eor	r20, r20
    1f50:	37 fd       	sbrc	r19, 7
    1f52:	40 95       	com	r20
    1f54:	54 2f       	mov	r21, r20
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	a8 0e       	add	r10, r24
    1f5c:	b9 1e       	adc	r11, r25
    1f5e:	9f e6       	ldi	r25, 0x6F	; 111
    1f60:	f9 22       	and	r15, r25
    1f62:	57 ff       	sbrs	r21, 7
    1f64:	09 c0       	rjmp	.+18     	; 0x1f78 <vfprintf+0x21e>
    1f66:	50 95       	com	r21
    1f68:	40 95       	com	r20
    1f6a:	30 95       	com	r19
    1f6c:	21 95       	neg	r18
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	4f 4f       	sbci	r20, 0xFF	; 255
    1f72:	5f 4f       	sbci	r21, 0xFF	; 255
    1f74:	e0 e8       	ldi	r30, 0x80	; 128
    1f76:	fe 2a       	or	r15, r30
    1f78:	ca 01       	movw	r24, r20
    1f7a:	b9 01       	movw	r22, r18
    1f7c:	a1 01       	movw	r20, r2
    1f7e:	2a e0       	ldi	r18, 0x0A	; 10
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	0e 94 cc 10 	call	0x2198	; 0x2198 <__ultoa_invert>
    1f86:	d8 2e       	mov	r13, r24
    1f88:	d2 18       	sub	r13, r2
    1f8a:	40 c0       	rjmp	.+128    	; 0x200c <vfprintf+0x2b2>
    1f8c:	95 37       	cpi	r25, 0x75	; 117
    1f8e:	29 f4       	brne	.+10     	; 0x1f9a <vfprintf+0x240>
    1f90:	1f 2d       	mov	r17, r15
    1f92:	1f 7e       	andi	r17, 0xEF	; 239
    1f94:	2a e0       	ldi	r18, 0x0A	; 10
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	1d c0       	rjmp	.+58     	; 0x1fd4 <vfprintf+0x27a>
    1f9a:	1f 2d       	mov	r17, r15
    1f9c:	19 7f       	andi	r17, 0xF9	; 249
    1f9e:	9f 36       	cpi	r25, 0x6F	; 111
    1fa0:	61 f0       	breq	.+24     	; 0x1fba <vfprintf+0x260>
    1fa2:	90 37       	cpi	r25, 0x70	; 112
    1fa4:	20 f4       	brcc	.+8      	; 0x1fae <vfprintf+0x254>
    1fa6:	98 35       	cpi	r25, 0x58	; 88
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <vfprintf+0x252>
    1faa:	ac c0       	rjmp	.+344    	; 0x2104 <vfprintf+0x3aa>
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <vfprintf+0x272>
    1fae:	90 37       	cpi	r25, 0x70	; 112
    1fb0:	39 f0       	breq	.+14     	; 0x1fc0 <vfprintf+0x266>
    1fb2:	98 37       	cpi	r25, 0x78	; 120
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <vfprintf+0x25e>
    1fb6:	a6 c0       	rjmp	.+332    	; 0x2104 <vfprintf+0x3aa>
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <vfprintf+0x268>
    1fba:	28 e0       	ldi	r18, 0x08	; 8
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	0a c0       	rjmp	.+20     	; 0x1fd4 <vfprintf+0x27a>
    1fc0:	10 61       	ori	r17, 0x10	; 16
    1fc2:	14 fd       	sbrc	r17, 4
    1fc4:	14 60       	ori	r17, 0x04	; 4
    1fc6:	20 e1       	ldi	r18, 0x10	; 16
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <vfprintf+0x27a>
    1fcc:	14 fd       	sbrc	r17, 4
    1fce:	16 60       	ori	r17, 0x06	; 6
    1fd0:	20 e1       	ldi	r18, 0x10	; 16
    1fd2:	32 e0       	ldi	r19, 0x02	; 2
    1fd4:	17 ff       	sbrs	r17, 7
    1fd6:	08 c0       	rjmp	.+16     	; 0x1fe8 <vfprintf+0x28e>
    1fd8:	f5 01       	movw	r30, r10
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	44 e0       	ldi	r20, 0x04	; 4
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	08 c0       	rjmp	.+16     	; 0x1ff8 <vfprintf+0x29e>
    1fe8:	f5 01       	movw	r30, r10
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	bc 01       	movw	r22, r24
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	42 e0       	ldi	r20, 0x02	; 2
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	a4 0e       	add	r10, r20
    1ffa:	b5 1e       	adc	r11, r21
    1ffc:	a1 01       	movw	r20, r2
    1ffe:	0e 94 cc 10 	call	0x2198	; 0x2198 <__ultoa_invert>
    2002:	d8 2e       	mov	r13, r24
    2004:	d2 18       	sub	r13, r2
    2006:	8f e7       	ldi	r24, 0x7F	; 127
    2008:	f8 2e       	mov	r15, r24
    200a:	f1 22       	and	r15, r17
    200c:	f6 fe       	sbrs	r15, 6
    200e:	0b c0       	rjmp	.+22     	; 0x2026 <vfprintf+0x2cc>
    2010:	5e ef       	ldi	r21, 0xFE	; 254
    2012:	f5 22       	and	r15, r21
    2014:	d9 14       	cp	r13, r9
    2016:	38 f4       	brcc	.+14     	; 0x2026 <vfprintf+0x2cc>
    2018:	f4 fe       	sbrs	r15, 4
    201a:	07 c0       	rjmp	.+14     	; 0x202a <vfprintf+0x2d0>
    201c:	f2 fc       	sbrc	r15, 2
    201e:	05 c0       	rjmp	.+10     	; 0x202a <vfprintf+0x2d0>
    2020:	8f ee       	ldi	r24, 0xEF	; 239
    2022:	f8 22       	and	r15, r24
    2024:	02 c0       	rjmp	.+4      	; 0x202a <vfprintf+0x2d0>
    2026:	1d 2d       	mov	r17, r13
    2028:	01 c0       	rjmp	.+2      	; 0x202c <vfprintf+0x2d2>
    202a:	19 2d       	mov	r17, r9
    202c:	f4 fe       	sbrs	r15, 4
    202e:	0d c0       	rjmp	.+26     	; 0x204a <vfprintf+0x2f0>
    2030:	fe 01       	movw	r30, r28
    2032:	ed 0d       	add	r30, r13
    2034:	f1 1d       	adc	r31, r1
    2036:	80 81       	ld	r24, Z
    2038:	80 33       	cpi	r24, 0x30	; 48
    203a:	19 f4       	brne	.+6      	; 0x2042 <vfprintf+0x2e8>
    203c:	99 ee       	ldi	r25, 0xE9	; 233
    203e:	f9 22       	and	r15, r25
    2040:	08 c0       	rjmp	.+16     	; 0x2052 <vfprintf+0x2f8>
    2042:	1f 5f       	subi	r17, 0xFF	; 255
    2044:	f2 fe       	sbrs	r15, 2
    2046:	05 c0       	rjmp	.+10     	; 0x2052 <vfprintf+0x2f8>
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <vfprintf+0x2f6>
    204a:	8f 2d       	mov	r24, r15
    204c:	86 78       	andi	r24, 0x86	; 134
    204e:	09 f0       	breq	.+2      	; 0x2052 <vfprintf+0x2f8>
    2050:	1f 5f       	subi	r17, 0xFF	; 255
    2052:	0f 2d       	mov	r16, r15
    2054:	f3 fc       	sbrc	r15, 3
    2056:	14 c0       	rjmp	.+40     	; 0x2080 <vfprintf+0x326>
    2058:	f0 fe       	sbrs	r15, 0
    205a:	0f c0       	rjmp	.+30     	; 0x207a <vfprintf+0x320>
    205c:	1e 15       	cp	r17, r14
    205e:	10 f0       	brcs	.+4      	; 0x2064 <vfprintf+0x30a>
    2060:	9d 2c       	mov	r9, r13
    2062:	0b c0       	rjmp	.+22     	; 0x207a <vfprintf+0x320>
    2064:	9d 2c       	mov	r9, r13
    2066:	9e 0c       	add	r9, r14
    2068:	91 1a       	sub	r9, r17
    206a:	1e 2d       	mov	r17, r14
    206c:	06 c0       	rjmp	.+12     	; 0x207a <vfprintf+0x320>
    206e:	80 e2       	ldi	r24, 0x20	; 32
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	b3 01       	movw	r22, r6
    2074:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    2078:	1f 5f       	subi	r17, 0xFF	; 255
    207a:	1e 15       	cp	r17, r14
    207c:	c0 f3       	brcs	.-16     	; 0x206e <vfprintf+0x314>
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <vfprintf+0x32e>
    2080:	1e 15       	cp	r17, r14
    2082:	10 f4       	brcc	.+4      	; 0x2088 <vfprintf+0x32e>
    2084:	e1 1a       	sub	r14, r17
    2086:	01 c0       	rjmp	.+2      	; 0x208a <vfprintf+0x330>
    2088:	ee 24       	eor	r14, r14
    208a:	04 ff       	sbrs	r16, 4
    208c:	0f c0       	rjmp	.+30     	; 0x20ac <vfprintf+0x352>
    208e:	80 e3       	ldi	r24, 0x30	; 48
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	b3 01       	movw	r22, r6
    2094:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    2098:	02 ff       	sbrs	r16, 2
    209a:	1d c0       	rjmp	.+58     	; 0x20d6 <vfprintf+0x37c>
    209c:	01 fd       	sbrc	r16, 1
    209e:	03 c0       	rjmp	.+6      	; 0x20a6 <vfprintf+0x34c>
    20a0:	88 e7       	ldi	r24, 0x78	; 120
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e c0       	rjmp	.+28     	; 0x20c2 <vfprintf+0x368>
    20a6:	88 e5       	ldi	r24, 0x58	; 88
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	0b c0       	rjmp	.+22     	; 0x20c2 <vfprintf+0x368>
    20ac:	80 2f       	mov	r24, r16
    20ae:	86 78       	andi	r24, 0x86	; 134
    20b0:	91 f0       	breq	.+36     	; 0x20d6 <vfprintf+0x37c>
    20b2:	01 ff       	sbrs	r16, 1
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <vfprintf+0x360>
    20b6:	8b e2       	ldi	r24, 0x2B	; 43
    20b8:	01 c0       	rjmp	.+2      	; 0x20bc <vfprintf+0x362>
    20ba:	80 e2       	ldi	r24, 0x20	; 32
    20bc:	f7 fc       	sbrc	r15, 7
    20be:	8d e2       	ldi	r24, 0x2D	; 45
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	b3 01       	movw	r22, r6
    20c4:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    20c8:	06 c0       	rjmp	.+12     	; 0x20d6 <vfprintf+0x37c>
    20ca:	80 e3       	ldi	r24, 0x30	; 48
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	b3 01       	movw	r22, r6
    20d0:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    20d4:	9a 94       	dec	r9
    20d6:	d9 14       	cp	r13, r9
    20d8:	c0 f3       	brcs	.-16     	; 0x20ca <vfprintf+0x370>
    20da:	da 94       	dec	r13
    20dc:	f1 01       	movw	r30, r2
    20de:	ed 0d       	add	r30, r13
    20e0:	f1 1d       	adc	r31, r1
    20e2:	80 81       	ld	r24, Z
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	b3 01       	movw	r22, r6
    20e8:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    20ec:	dd 20       	and	r13, r13
    20ee:	a9 f7       	brne	.-22     	; 0x20da <vfprintf+0x380>
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <vfprintf+0x3a4>
    20f2:	80 e2       	ldi	r24, 0x20	; 32
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	b3 01       	movw	r22, r6
    20f8:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    20fc:	ea 94       	dec	r14
    20fe:	ee 20       	and	r14, r14
    2100:	c1 f7       	brne	.-16     	; 0x20f2 <vfprintf+0x398>
    2102:	43 ce       	rjmp	.-890    	; 0x1d8a <vfprintf+0x30>
    2104:	f3 01       	movw	r30, r6
    2106:	66 81       	ldd	r22, Z+6	; 0x06
    2108:	77 81       	ldd	r23, Z+7	; 0x07
    210a:	cb 01       	movw	r24, r22
    210c:	2b 96       	adiw	r28, 0x0b	; 11
    210e:	e2 e1       	ldi	r30, 0x12	; 18
    2110:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__epilogue_restores__>

00002114 <strnlen_P>:
    2114:	fc 01       	movw	r30, r24
    2116:	05 90       	lpm	r0, Z+
    2118:	61 50       	subi	r22, 0x01	; 1
    211a:	70 40       	sbci	r23, 0x00	; 0
    211c:	01 10       	cpse	r0, r1
    211e:	d8 f7       	brcc	.-10     	; 0x2116 <strnlen_P+0x2>
    2120:	80 95       	com	r24
    2122:	90 95       	com	r25
    2124:	8e 0f       	add	r24, r30
    2126:	9f 1f       	adc	r25, r31
    2128:	08 95       	ret

0000212a <strnlen>:
    212a:	fc 01       	movw	r30, r24
    212c:	61 50       	subi	r22, 0x01	; 1
    212e:	70 40       	sbci	r23, 0x00	; 0
    2130:	01 90       	ld	r0, Z+
    2132:	01 10       	cpse	r0, r1
    2134:	d8 f7       	brcc	.-10     	; 0x212c <strnlen+0x2>
    2136:	80 95       	com	r24
    2138:	90 95       	com	r25
    213a:	8e 0f       	add	r24, r30
    213c:	9f 1f       	adc	r25, r31
    213e:	08 95       	ret

00002140 <fputc>:
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	8c 01       	movw	r16, r24
    214a:	eb 01       	movw	r28, r22
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	81 ff       	sbrs	r24, 1
    2150:	1b c0       	rjmp	.+54     	; 0x2188 <fputc+0x48>
    2152:	82 ff       	sbrs	r24, 2
    2154:	0d c0       	rjmp	.+26     	; 0x2170 <fputc+0x30>
    2156:	2e 81       	ldd	r18, Y+6	; 0x06
    2158:	3f 81       	ldd	r19, Y+7	; 0x07
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	9d 81       	ldd	r25, Y+5	; 0x05
    215e:	28 17       	cp	r18, r24
    2160:	39 07       	cpc	r19, r25
    2162:	64 f4       	brge	.+24     	; 0x217c <fputc+0x3c>
    2164:	e8 81       	ld	r30, Y
    2166:	f9 81       	ldd	r31, Y+1	; 0x01
    2168:	01 93       	st	Z+, r16
    216a:	f9 83       	std	Y+1, r31	; 0x01
    216c:	e8 83       	st	Y, r30
    216e:	06 c0       	rjmp	.+12     	; 0x217c <fputc+0x3c>
    2170:	e8 85       	ldd	r30, Y+8	; 0x08
    2172:	f9 85       	ldd	r31, Y+9	; 0x09
    2174:	80 2f       	mov	r24, r16
    2176:	09 95       	icall
    2178:	89 2b       	or	r24, r25
    217a:	31 f4       	brne	.+12     	; 0x2188 <fputc+0x48>
    217c:	8e 81       	ldd	r24, Y+6	; 0x06
    217e:	9f 81       	ldd	r25, Y+7	; 0x07
    2180:	01 96       	adiw	r24, 0x01	; 1
    2182:	9f 83       	std	Y+7, r25	; 0x07
    2184:	8e 83       	std	Y+6, r24	; 0x06
    2186:	02 c0       	rjmp	.+4      	; 0x218c <fputc+0x4c>
    2188:	0f ef       	ldi	r16, 0xFF	; 255
    218a:	1f ef       	ldi	r17, 0xFF	; 255
    218c:	c8 01       	movw	r24, r16
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	1f 91       	pop	r17
    2194:	0f 91       	pop	r16
    2196:	08 95       	ret

00002198 <__ultoa_invert>:
    2198:	fa 01       	movw	r30, r20
    219a:	aa 27       	eor	r26, r26
    219c:	28 30       	cpi	r18, 0x08	; 8
    219e:	51 f1       	breq	.+84     	; 0x21f4 <__ultoa_invert+0x5c>
    21a0:	20 31       	cpi	r18, 0x10	; 16
    21a2:	81 f1       	breq	.+96     	; 0x2204 <__ultoa_invert+0x6c>
    21a4:	e8 94       	clt
    21a6:	6f 93       	push	r22
    21a8:	6e 7f       	andi	r22, 0xFE	; 254
    21aa:	6e 5f       	subi	r22, 0xFE	; 254
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	8f 4f       	sbci	r24, 0xFF	; 255
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	af 4f       	sbci	r26, 0xFF	; 255
    21b4:	b1 e0       	ldi	r27, 0x01	; 1
    21b6:	3e d0       	rcall	.+124    	; 0x2234 <__ultoa_invert+0x9c>
    21b8:	b4 e0       	ldi	r27, 0x04	; 4
    21ba:	3c d0       	rcall	.+120    	; 0x2234 <__ultoa_invert+0x9c>
    21bc:	67 0f       	add	r22, r23
    21be:	78 1f       	adc	r23, r24
    21c0:	89 1f       	adc	r24, r25
    21c2:	9a 1f       	adc	r25, r26
    21c4:	a1 1d       	adc	r26, r1
    21c6:	68 0f       	add	r22, r24
    21c8:	79 1f       	adc	r23, r25
    21ca:	8a 1f       	adc	r24, r26
    21cc:	91 1d       	adc	r25, r1
    21ce:	a1 1d       	adc	r26, r1
    21d0:	6a 0f       	add	r22, r26
    21d2:	71 1d       	adc	r23, r1
    21d4:	81 1d       	adc	r24, r1
    21d6:	91 1d       	adc	r25, r1
    21d8:	a1 1d       	adc	r26, r1
    21da:	20 d0       	rcall	.+64     	; 0x221c <__ultoa_invert+0x84>
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <__ultoa_invert+0x48>
    21de:	68 94       	set
    21e0:	3f 91       	pop	r19
    21e2:	2a e0       	ldi	r18, 0x0A	; 10
    21e4:	26 9f       	mul	r18, r22
    21e6:	11 24       	eor	r1, r1
    21e8:	30 19       	sub	r19, r0
    21ea:	30 5d       	subi	r19, 0xD0	; 208
    21ec:	31 93       	st	Z+, r19
    21ee:	de f6       	brtc	.-74     	; 0x21a6 <__ultoa_invert+0xe>
    21f0:	cf 01       	movw	r24, r30
    21f2:	08 95       	ret
    21f4:	46 2f       	mov	r20, r22
    21f6:	47 70       	andi	r20, 0x07	; 7
    21f8:	40 5d       	subi	r20, 0xD0	; 208
    21fa:	41 93       	st	Z+, r20
    21fc:	b3 e0       	ldi	r27, 0x03	; 3
    21fe:	0f d0       	rcall	.+30     	; 0x221e <__ultoa_invert+0x86>
    2200:	c9 f7       	brne	.-14     	; 0x21f4 <__ultoa_invert+0x5c>
    2202:	f6 cf       	rjmp	.-20     	; 0x21f0 <__ultoa_invert+0x58>
    2204:	46 2f       	mov	r20, r22
    2206:	4f 70       	andi	r20, 0x0F	; 15
    2208:	40 5d       	subi	r20, 0xD0	; 208
    220a:	4a 33       	cpi	r20, 0x3A	; 58
    220c:	18 f0       	brcs	.+6      	; 0x2214 <__ultoa_invert+0x7c>
    220e:	49 5d       	subi	r20, 0xD9	; 217
    2210:	31 fd       	sbrc	r19, 1
    2212:	40 52       	subi	r20, 0x20	; 32
    2214:	41 93       	st	Z+, r20
    2216:	02 d0       	rcall	.+4      	; 0x221c <__ultoa_invert+0x84>
    2218:	a9 f7       	brne	.-22     	; 0x2204 <__ultoa_invert+0x6c>
    221a:	ea cf       	rjmp	.-44     	; 0x21f0 <__ultoa_invert+0x58>
    221c:	b4 e0       	ldi	r27, 0x04	; 4
    221e:	a6 95       	lsr	r26
    2220:	97 95       	ror	r25
    2222:	87 95       	ror	r24
    2224:	77 95       	ror	r23
    2226:	67 95       	ror	r22
    2228:	ba 95       	dec	r27
    222a:	c9 f7       	brne	.-14     	; 0x221e <__ultoa_invert+0x86>
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	61 05       	cpc	r22, r1
    2230:	71 05       	cpc	r23, r1
    2232:	08 95       	ret
    2234:	9b 01       	movw	r18, r22
    2236:	ac 01       	movw	r20, r24
    2238:	0a 2e       	mov	r0, r26
    223a:	06 94       	lsr	r0
    223c:	57 95       	ror	r21
    223e:	47 95       	ror	r20
    2240:	37 95       	ror	r19
    2242:	27 95       	ror	r18
    2244:	ba 95       	dec	r27
    2246:	c9 f7       	brne	.-14     	; 0x223a <__ultoa_invert+0xa2>
    2248:	62 0f       	add	r22, r18
    224a:	73 1f       	adc	r23, r19
    224c:	84 1f       	adc	r24, r20
    224e:	95 1f       	adc	r25, r21
    2250:	a0 1d       	adc	r26, r0
    2252:	08 95       	ret

00002254 <_exit>:
    2254:	f8 94       	cli

00002256 <__stop_program>:
    2256:	ff cf       	rjmp	.-2      	; 0x2256 <__stop_program>
