
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000d20  00000db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800064  00800064  00000db8  2**0
                  ALLOC
  3 .stab         000012fc  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000858  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2b 06 	call	0xc56	; 0xc56 <main>
  8a:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_u8SetPinDirecton>:




u8 DIO_u8SetPinDirecton(u8 copy_u8Port,u8 copy_u8Pin,u8 copy_u8Direction)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	8a 83       	std	Y+2, r24	; 0x02
  a8:	6b 83       	std	Y+3, r22	; 0x03
  aa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState=0;
  ac:	19 82       	std	Y+1, r1	; 0x01

	if (copy_u8Pin<=7)
  ae:	8b 81       	ldd	r24, Y+3	; 0x03
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	08 f0       	brcs	.+2      	; 0xb6 <DIO_u8SetPinDirecton+0x24>
  b4:	f4 c0       	rjmp	.+488    	; 0x29e <DIO_u8SetPinDirecton+0x20c>
	{
		if (copy_u8Direction== DIO_u8PIN_INPUT)
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	88 23       	and	r24, r24
  ba:	09 f0       	breq	.+2      	; 0xbe <DIO_u8SetPinDirecton+0x2c>
  bc:	77 c0       	rjmp	.+238    	; 0x1ac <DIO_u8SetPinDirecton+0x11a>
		{
			switch(copy_u8Port)
  be:	8a 81       	ldd	r24, Y+2	; 0x02
  c0:	28 2f       	mov	r18, r24
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	38 87       	std	Y+8, r19	; 0x08
  c6:	2f 83       	std	Y+7, r18	; 0x07
  c8:	8f 81       	ldd	r24, Y+7	; 0x07
  ca:	98 85       	ldd	r25, Y+8	; 0x08
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	59 f1       	breq	.+86     	; 0x128 <DIO_u8SetPinDirecton+0x96>
  d2:	2f 81       	ldd	r18, Y+7	; 0x07
  d4:	38 85       	ldd	r19, Y+8	; 0x08
  d6:	22 30       	cpi	r18, 0x02	; 2
  d8:	31 05       	cpc	r19, r1
  da:	2c f4       	brge	.+10     	; 0xe6 <DIO_u8SetPinDirecton+0x54>
  dc:	8f 81       	ldd	r24, Y+7	; 0x07
  de:	98 85       	ldd	r25, Y+8	; 0x08
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	69 f0       	breq	.+26     	; 0xfe <DIO_u8SetPinDirecton+0x6c>
  e4:	60 c0       	rjmp	.+192    	; 0x1a6 <DIO_u8SetPinDirecton+0x114>
  e6:	2f 81       	ldd	r18, Y+7	; 0x07
  e8:	38 85       	ldd	r19, Y+8	; 0x08
  ea:	22 30       	cpi	r18, 0x02	; 2
  ec:	31 05       	cpc	r19, r1
  ee:	89 f1       	breq	.+98     	; 0x152 <DIO_u8SetPinDirecton+0xc0>
  f0:	8f 81       	ldd	r24, Y+7	; 0x07
  f2:	98 85       	ldd	r25, Y+8	; 0x08
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	91 05       	cpc	r25, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <DIO_u8SetPinDirecton+0x6a>
  fa:	40 c0       	rjmp	.+128    	; 0x17c <DIO_u8SetPinDirecton+0xea>
  fc:	54 c0       	rjmp	.+168    	; 0x1a6 <DIO_u8SetPinDirecton+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,copy_u8Pin);break;
  fe:	aa e3       	ldi	r26, 0x3A	; 58
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	ea e3       	ldi	r30, 0x3A	; 58
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	48 2f       	mov	r20, r24
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 2e       	mov	r0, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_u8SetPinDirecton+0x8a>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_u8SetPinDirecton+0x86>
 120:	80 95       	com	r24
 122:	84 23       	and	r24, r20
 124:	8c 93       	st	X, r24
 126:	bd c0       	rjmp	.+378    	; 0x2a2 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,copy_u8Pin);break;
 128:	a7 e3       	ldi	r26, 0x37	; 55
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	e7 e3       	ldi	r30, 0x37	; 55
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	48 2f       	mov	r20, r24
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 2e       	mov	r0, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_u8SetPinDirecton+0xb4>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_u8SetPinDirecton+0xb0>
 14a:	80 95       	com	r24
 14c:	84 23       	and	r24, r20
 14e:	8c 93       	st	X, r24
 150:	a8 c0       	rjmp	.+336    	; 0x2a2 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,copy_u8Pin);break;
 152:	a4 e3       	ldi	r26, 0x34	; 52
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e4 e3       	ldi	r30, 0x34	; 52
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	48 2f       	mov	r20, r24
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_u8SetPinDirecton+0xde>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_u8SetPinDirecton+0xda>
 174:	80 95       	com	r24
 176:	84 23       	and	r24, r20
 178:	8c 93       	st	X, r24
 17a:	93 c0       	rjmp	.+294    	; 0x2a2 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,copy_u8Pin);break;
 17c:	a1 e3       	ldi	r26, 0x31	; 49
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e1 e3       	ldi	r30, 0x31	; 49
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	48 2f       	mov	r20, r24
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 2e       	mov	r0, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_u8SetPinDirecton+0x108>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_u8SetPinDirecton+0x104>
 19e:	80 95       	com	r24
 1a0:	84 23       	and	r24, r20
 1a2:	8c 93       	st	X, r24
 1a4:	7e c0       	rjmp	.+252    	; 0x2a2 <DIO_u8SetPinDirecton+0x210>
			default: Local_u8ErorrState =1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	89 83       	std	Y+1, r24	; 0x01
 1aa:	7b c0       	rjmp	.+246    	; 0x2a2 <DIO_u8SetPinDirecton+0x210>
			}
		}
		else if(copy_u8Direction==DIO_u8PIN_OUTPUT)
 1ac:	8c 81       	ldd	r24, Y+4	; 0x04
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_u8SetPinDirecton+0x122>
 1b2:	72 c0       	rjmp	.+228    	; 0x298 <DIO_u8SetPinDirecton+0x206>
		{
			switch(copy_u8Port)
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	3e 83       	std	Y+6, r19	; 0x06
 1bc:	2d 83       	std	Y+5, r18	; 0x05
 1be:	8d 81       	ldd	r24, Y+5	; 0x05
 1c0:	9e 81       	ldd	r25, Y+6	; 0x06
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	91 05       	cpc	r25, r1
 1c6:	49 f1       	breq	.+82     	; 0x21a <DIO_u8SetPinDirecton+0x188>
 1c8:	2d 81       	ldd	r18, Y+5	; 0x05
 1ca:	3e 81       	ldd	r19, Y+6	; 0x06
 1cc:	22 30       	cpi	r18, 0x02	; 2
 1ce:	31 05       	cpc	r19, r1
 1d0:	2c f4       	brge	.+10     	; 0x1dc <DIO_u8SetPinDirecton+0x14a>
 1d2:	8d 81       	ldd	r24, Y+5	; 0x05
 1d4:	9e 81       	ldd	r25, Y+6	; 0x06
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	61 f0       	breq	.+24     	; 0x1f2 <DIO_u8SetPinDirecton+0x160>
 1da:	5b c0       	rjmp	.+182    	; 0x292 <DIO_u8SetPinDirecton+0x200>
 1dc:	2d 81       	ldd	r18, Y+5	; 0x05
 1de:	3e 81       	ldd	r19, Y+6	; 0x06
 1e0:	22 30       	cpi	r18, 0x02	; 2
 1e2:	31 05       	cpc	r19, r1
 1e4:	71 f1       	breq	.+92     	; 0x242 <DIO_u8SetPinDirecton+0x1b0>
 1e6:	8d 81       	ldd	r24, Y+5	; 0x05
 1e8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	91 05       	cpc	r25, r1
 1ee:	e9 f1       	breq	.+122    	; 0x26a <DIO_u8SetPinDirecton+0x1d8>
 1f0:	50 c0       	rjmp	.+160    	; 0x292 <DIO_u8SetPinDirecton+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,copy_u8Pin);break;
 1f2:	aa e3       	ldi	r26, 0x3A	; 58
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	ea e3       	ldi	r30, 0x3A	; 58
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	48 2f       	mov	r20, r24
 1fe:	8b 81       	ldd	r24, Y+3	; 0x03
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8SetPinDirecton+0x17e>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8SetPinDirecton+0x17a>
 214:	84 2b       	or	r24, r20
 216:	8c 93       	st	X, r24
 218:	44 c0       	rjmp	.+136    	; 0x2a2 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,copy_u8Pin);break;
 21a:	a7 e3       	ldi	r26, 0x37	; 55
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e7 e3       	ldi	r30, 0x37	; 55
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	48 2f       	mov	r20, r24
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 2e       	mov	r0, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_u8SetPinDirecton+0x1a6>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_u8SetPinDirecton+0x1a2>
 23c:	84 2b       	or	r24, r20
 23e:	8c 93       	st	X, r24
 240:	30 c0       	rjmp	.+96     	; 0x2a2 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,copy_u8Pin);break;
 242:	a4 e3       	ldi	r26, 0x34	; 52
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e4 e3       	ldi	r30, 0x34	; 52
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_u8SetPinDirecton+0x1ce>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_u8SetPinDirecton+0x1ca>
 264:	84 2b       	or	r24, r20
 266:	8c 93       	st	X, r24
 268:	1c c0       	rjmp	.+56     	; 0x2a2 <DIO_u8SetPinDirecton+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,copy_u8Pin);break;
 26a:	a1 e3       	ldi	r26, 0x31	; 49
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e1 e3       	ldi	r30, 0x31	; 49
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	48 2f       	mov	r20, r24
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	28 2f       	mov	r18, r24
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 2e       	mov	r0, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_u8SetPinDirecton+0x1f6>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_u8SetPinDirecton+0x1f2>
 28c:	84 2b       	or	r24, r20
 28e:	8c 93       	st	X, r24
 290:	08 c0       	rjmp	.+16     	; 0x2a2 <DIO_u8SetPinDirecton+0x210>
			default: Local_u8ErorrState =1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	89 83       	std	Y+1, r24	; 0x01
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <DIO_u8SetPinDirecton+0x210>
			}
		}
		else
		{
			Local_u8ErorrState = 1;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8SetPinDirecton+0x210>
		}
	}
	else
	{
		Local_u8ErorrState = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErorrState;
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2a4:	28 96       	adiw	r28, 0x08	; 8
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	cf 91       	pop	r28
 2b2:	df 91       	pop	r29
 2b4:	08 95       	ret

000002b6 <DIO_u8SetPortDirecton>:
/*________________________________________________________________________*/
u8 DIO_u8SetPortDirecton(u8 copy_u8Port,u8 copy_u8Direction)
{
 2b6:	df 93       	push	r29
 2b8:	cf 93       	push	r28
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <DIO_u8SetPortDirecton+0x6>
 2bc:	00 d0       	rcall	.+0      	; 0x2be <DIO_u8SetPortDirecton+0x8>
 2be:	0f 92       	push	r0
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	8a 83       	std	Y+2, r24	; 0x02
 2c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState=0;
 2c8:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8Port)
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	3d 83       	std	Y+5, r19	; 0x05
 2d2:	2c 83       	std	Y+4, r18	; 0x04
 2d4:	8c 81       	ldd	r24, Y+4	; 0x04
 2d6:	9d 81       	ldd	r25, Y+5	; 0x05
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	91 05       	cpc	r25, r1
 2dc:	d1 f0       	breq	.+52     	; 0x312 <DIO_u8SetPortDirecton+0x5c>
 2de:	2c 81       	ldd	r18, Y+4	; 0x04
 2e0:	3d 81       	ldd	r19, Y+5	; 0x05
 2e2:	22 30       	cpi	r18, 0x02	; 2
 2e4:	31 05       	cpc	r19, r1
 2e6:	2c f4       	brge	.+10     	; 0x2f2 <DIO_u8SetPortDirecton+0x3c>
 2e8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ea:	9d 81       	ldd	r25, Y+5	; 0x05
 2ec:	00 97       	sbiw	r24, 0x00	; 0
 2ee:	61 f0       	breq	.+24     	; 0x308 <DIO_u8SetPortDirecton+0x52>
 2f0:	1f c0       	rjmp	.+62     	; 0x330 <DIO_u8SetPortDirecton+0x7a>
 2f2:	2c 81       	ldd	r18, Y+4	; 0x04
 2f4:	3d 81       	ldd	r19, Y+5	; 0x05
 2f6:	22 30       	cpi	r18, 0x02	; 2
 2f8:	31 05       	cpc	r19, r1
 2fa:	81 f0       	breq	.+32     	; 0x31c <DIO_u8SetPortDirecton+0x66>
 2fc:	8c 81       	ldd	r24, Y+4	; 0x04
 2fe:	9d 81       	ldd	r25, Y+5	; 0x05
 300:	83 30       	cpi	r24, 0x03	; 3
 302:	91 05       	cpc	r25, r1
 304:	81 f0       	breq	.+32     	; 0x326 <DIO_u8SetPortDirecton+0x70>
 306:	14 c0       	rjmp	.+40     	; 0x330 <DIO_u8SetPortDirecton+0x7a>
	{
	case DIO_u8PORTA: DDRA =copy_u8Direction;break;
 308:	ea e3       	ldi	r30, 0x3A	; 58
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	80 83       	st	Z, r24
 310:	11 c0       	rjmp	.+34     	; 0x334 <DIO_u8SetPortDirecton+0x7e>
	case DIO_u8PORTB: DDRB =copy_u8Direction;break;
 312:	e7 e3       	ldi	r30, 0x37	; 55
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	80 83       	st	Z, r24
 31a:	0c c0       	rjmp	.+24     	; 0x334 <DIO_u8SetPortDirecton+0x7e>
	case DIO_u8PORTC: DDRC =copy_u8Direction;break;
 31c:	e4 e3       	ldi	r30, 0x34	; 52
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	80 83       	st	Z, r24
 324:	07 c0       	rjmp	.+14     	; 0x334 <DIO_u8SetPortDirecton+0x7e>
	case DIO_u8PORTD: DDRD =copy_u8Direction;break;
 326:	e1 e3       	ldi	r30, 0x31	; 49
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	80 83       	st	Z, r24
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8SetPortDirecton+0x7e>
	default: Local_u8ErorrState=1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErorrState;
 334:	89 81       	ldd	r24, Y+1	; 0x01

}
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	cf 91       	pop	r28
 342:	df 91       	pop	r29
 344:	08 95       	ret

00000346 <DIO_u8SetPinValue>:

/*________________________________________________________________________*/

u8 DIO_u8SetPinValue(u8 copy_u8Port,u8 copy_u8Pin,u8 copy_u8Value)
{
 346:	df 93       	push	r29
 348:	cf 93       	push	r28
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	28 97       	sbiw	r28, 0x08	; 8
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	8a 83       	std	Y+2, r24	; 0x02
 35c:	6b 83       	std	Y+3, r22	; 0x03
 35e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErorrState=0;
 360:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Pin<=7)
 362:	8b 81       	ldd	r24, Y+3	; 0x03
 364:	88 30       	cpi	r24, 0x08	; 8
 366:	08 f0       	brcs	.+2      	; 0x36a <DIO_u8SetPinValue+0x24>
 368:	f4 c0       	rjmp	.+488    	; 0x552 <DIO_u8SetPinValue+0x20c>
	{
		if(copy_u8Value==DIO_u8PIN_LOW)
 36a:	8c 81       	ldd	r24, Y+4	; 0x04
 36c:	88 23       	and	r24, r24
 36e:	09 f0       	breq	.+2      	; 0x372 <DIO_u8SetPinValue+0x2c>
 370:	77 c0       	rjmp	.+238    	; 0x460 <DIO_u8SetPinValue+0x11a>
		{
			switch(copy_u8Port)
 372:	8a 81       	ldd	r24, Y+2	; 0x02
 374:	28 2f       	mov	r18, r24
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	38 87       	std	Y+8, r19	; 0x08
 37a:	2f 83       	std	Y+7, r18	; 0x07
 37c:	8f 81       	ldd	r24, Y+7	; 0x07
 37e:	98 85       	ldd	r25, Y+8	; 0x08
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	91 05       	cpc	r25, r1
 384:	59 f1       	breq	.+86     	; 0x3dc <DIO_u8SetPinValue+0x96>
 386:	2f 81       	ldd	r18, Y+7	; 0x07
 388:	38 85       	ldd	r19, Y+8	; 0x08
 38a:	22 30       	cpi	r18, 0x02	; 2
 38c:	31 05       	cpc	r19, r1
 38e:	2c f4       	brge	.+10     	; 0x39a <DIO_u8SetPinValue+0x54>
 390:	8f 81       	ldd	r24, Y+7	; 0x07
 392:	98 85       	ldd	r25, Y+8	; 0x08
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	69 f0       	breq	.+26     	; 0x3b2 <DIO_u8SetPinValue+0x6c>
 398:	60 c0       	rjmp	.+192    	; 0x45a <DIO_u8SetPinValue+0x114>
 39a:	2f 81       	ldd	r18, Y+7	; 0x07
 39c:	38 85       	ldd	r19, Y+8	; 0x08
 39e:	22 30       	cpi	r18, 0x02	; 2
 3a0:	31 05       	cpc	r19, r1
 3a2:	89 f1       	breq	.+98     	; 0x406 <DIO_u8SetPinValue+0xc0>
 3a4:	8f 81       	ldd	r24, Y+7	; 0x07
 3a6:	98 85       	ldd	r25, Y+8	; 0x08
 3a8:	83 30       	cpi	r24, 0x03	; 3
 3aa:	91 05       	cpc	r25, r1
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <DIO_u8SetPinValue+0x6a>
 3ae:	40 c0       	rjmp	.+128    	; 0x430 <DIO_u8SetPinValue+0xea>
 3b0:	54 c0       	rjmp	.+168    	; 0x45a <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,copy_u8Pin);break;
 3b2:	ab e3       	ldi	r26, 0x3B	; 59
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	eb e3       	ldi	r30, 0x3B	; 59
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 2e       	mov	r0, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_u8SetPinValue+0x8a>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_u8SetPinValue+0x86>
 3d4:	80 95       	com	r24
 3d6:	84 23       	and	r24, r20
 3d8:	8c 93       	st	X, r24
 3da:	bd c0       	rjmp	.+378    	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,copy_u8Pin);break;
 3dc:	a8 e3       	ldi	r26, 0x38	; 56
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	e8 e3       	ldi	r30, 0x38	; 56
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	48 2f       	mov	r20, r24
 3e8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 2e       	mov	r0, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_u8SetPinValue+0xb4>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	0a 94       	dec	r0
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_u8SetPinValue+0xb0>
 3fe:	80 95       	com	r24
 400:	84 23       	and	r24, r20
 402:	8c 93       	st	X, r24
 404:	a8 c0       	rjmp	.+336    	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,copy_u8Pin);break;
 406:	a5 e3       	ldi	r26, 0x35	; 53
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	e5 e3       	ldi	r30, 0x35	; 53
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	48 2f       	mov	r20, r24
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	28 2f       	mov	r18, r24
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 2e       	mov	r0, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_u8SetPinValue+0xde>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	0a 94       	dec	r0
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_u8SetPinValue+0xda>
 428:	80 95       	com	r24
 42a:	84 23       	and	r24, r20
 42c:	8c 93       	st	X, r24
 42e:	93 c0       	rjmp	.+294    	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,copy_u8Pin);break;
 430:	a2 e3       	ldi	r26, 0x32	; 50
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	e2 e3       	ldi	r30, 0x32	; 50
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	48 2f       	mov	r20, r24
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 2e       	mov	r0, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_u8SetPinValue+0x108>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_u8SetPinValue+0x104>
 452:	80 95       	com	r24
 454:	84 23       	and	r24, r20
 456:	8c 93       	st	X, r24
 458:	7e c0       	rjmp	.+252    	; 0x556 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErorrState =1;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	89 83       	std	Y+1, r24	; 0x01
 45e:	7b c0       	rjmp	.+246    	; 0x556 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (copy_u8Value==DIO_u8PIN_HIGH)
 460:	8c 81       	ldd	r24, Y+4	; 0x04
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	09 f0       	breq	.+2      	; 0x468 <DIO_u8SetPinValue+0x122>
 466:	72 c0       	rjmp	.+228    	; 0x54c <DIO_u8SetPinValue+0x206>
		{
			switch(copy_u8Port)
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	3e 83       	std	Y+6, r19	; 0x06
 470:	2d 83       	std	Y+5, r18	; 0x05
 472:	8d 81       	ldd	r24, Y+5	; 0x05
 474:	9e 81       	ldd	r25, Y+6	; 0x06
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	91 05       	cpc	r25, r1
 47a:	49 f1       	breq	.+82     	; 0x4ce <DIO_u8SetPinValue+0x188>
 47c:	2d 81       	ldd	r18, Y+5	; 0x05
 47e:	3e 81       	ldd	r19, Y+6	; 0x06
 480:	22 30       	cpi	r18, 0x02	; 2
 482:	31 05       	cpc	r19, r1
 484:	2c f4       	brge	.+10     	; 0x490 <DIO_u8SetPinValue+0x14a>
 486:	8d 81       	ldd	r24, Y+5	; 0x05
 488:	9e 81       	ldd	r25, Y+6	; 0x06
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	61 f0       	breq	.+24     	; 0x4a6 <DIO_u8SetPinValue+0x160>
 48e:	5b c0       	rjmp	.+182    	; 0x546 <DIO_u8SetPinValue+0x200>
 490:	2d 81       	ldd	r18, Y+5	; 0x05
 492:	3e 81       	ldd	r19, Y+6	; 0x06
 494:	22 30       	cpi	r18, 0x02	; 2
 496:	31 05       	cpc	r19, r1
 498:	71 f1       	breq	.+92     	; 0x4f6 <DIO_u8SetPinValue+0x1b0>
 49a:	8d 81       	ldd	r24, Y+5	; 0x05
 49c:	9e 81       	ldd	r25, Y+6	; 0x06
 49e:	83 30       	cpi	r24, 0x03	; 3
 4a0:	91 05       	cpc	r25, r1
 4a2:	e9 f1       	breq	.+122    	; 0x51e <DIO_u8SetPinValue+0x1d8>
 4a4:	50 c0       	rjmp	.+160    	; 0x546 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,copy_u8Pin);break;
 4a6:	ab e3       	ldi	r26, 0x3B	; 59
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	eb e3       	ldi	r30, 0x3B	; 59
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	48 2f       	mov	r20, r24
 4b2:	8b 81       	ldd	r24, Y+3	; 0x03
 4b4:	28 2f       	mov	r18, r24
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 2e       	mov	r0, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_u8SetPinValue+0x17e>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	0a 94       	dec	r0
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_u8SetPinValue+0x17a>
 4c8:	84 2b       	or	r24, r20
 4ca:	8c 93       	st	X, r24
 4cc:	44 c0       	rjmp	.+136    	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,copy_u8Pin);break;
 4ce:	a8 e3       	ldi	r26, 0x38	; 56
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	e8 e3       	ldi	r30, 0x38	; 56
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	48 2f       	mov	r20, r24
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 2e       	mov	r0, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_u8SetPinValue+0x1a6>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_u8SetPinValue+0x1a2>
 4f0:	84 2b       	or	r24, r20
 4f2:	8c 93       	st	X, r24
 4f4:	30 c0       	rjmp	.+96     	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,copy_u8Pin);break;
 4f6:	a5 e3       	ldi	r26, 0x35	; 53
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e5 e3       	ldi	r30, 0x35	; 53
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	48 2f       	mov	r20, r24
 502:	8b 81       	ldd	r24, Y+3	; 0x03
 504:	28 2f       	mov	r18, r24
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 2e       	mov	r0, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_u8SetPinValue+0x1ce>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	0a 94       	dec	r0
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_u8SetPinValue+0x1ca>
 518:	84 2b       	or	r24, r20
 51a:	8c 93       	st	X, r24
 51c:	1c c0       	rjmp	.+56     	; 0x556 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,copy_u8Pin);break;
 51e:	a2 e3       	ldi	r26, 0x32	; 50
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	e2 e3       	ldi	r30, 0x32	; 50
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	48 2f       	mov	r20, r24
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 2e       	mov	r0, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_u8SetPinValue+0x1f6>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	0a 94       	dec	r0
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_u8SetPinValue+0x1f2>
 540:	84 2b       	or	r24, r20
 542:	8c 93       	st	X, r24
 544:	08 c0       	rjmp	.+16     	; 0x556 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErorrState =1;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	89 83       	std	Y+1, r24	; 0x01
 54a:	05 c0       	rjmp	.+10     	; 0x556 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErorrState =1;
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	89 83       	std	Y+1, r24	; 0x01
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErorrState = 1;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErorrState;
 556:	89 81       	ldd	r24, Y+1	; 0x01
}
 558:	28 96       	adiw	r28, 0x08	; 8
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
 564:	cf 91       	pop	r28
 566:	df 91       	pop	r29
 568:	08 95       	ret

0000056a <DIO_u8SetPortValue>:
/*_______________________________________________________________________*/
u8 DIO_u8SetPortValue(u8 copy_u8Port,u8 copy_u8Value)
{
 56a:	df 93       	push	r29
 56c:	cf 93       	push	r28
 56e:	00 d0       	rcall	.+0      	; 0x570 <DIO_u8SetPortValue+0x6>
 570:	00 d0       	rcall	.+0      	; 0x572 <DIO_u8SetPortValue+0x8>
 572:	0f 92       	push	r0
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
 578:	8a 83       	std	Y+2, r24	; 0x02
 57a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorrState=0;
 57c:	19 82       	std	Y+1, r1	; 0x01
		switch(copy_u8Port)
 57e:	8a 81       	ldd	r24, Y+2	; 0x02
 580:	28 2f       	mov	r18, r24
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	3d 83       	std	Y+5, r19	; 0x05
 586:	2c 83       	std	Y+4, r18	; 0x04
 588:	8c 81       	ldd	r24, Y+4	; 0x04
 58a:	9d 81       	ldd	r25, Y+5	; 0x05
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	91 05       	cpc	r25, r1
 590:	d1 f0       	breq	.+52     	; 0x5c6 <DIO_u8SetPortValue+0x5c>
 592:	2c 81       	ldd	r18, Y+4	; 0x04
 594:	3d 81       	ldd	r19, Y+5	; 0x05
 596:	22 30       	cpi	r18, 0x02	; 2
 598:	31 05       	cpc	r19, r1
 59a:	2c f4       	brge	.+10     	; 0x5a6 <DIO_u8SetPortValue+0x3c>
 59c:	8c 81       	ldd	r24, Y+4	; 0x04
 59e:	9d 81       	ldd	r25, Y+5	; 0x05
 5a0:	00 97       	sbiw	r24, 0x00	; 0
 5a2:	61 f0       	breq	.+24     	; 0x5bc <DIO_u8SetPortValue+0x52>
 5a4:	1f c0       	rjmp	.+62     	; 0x5e4 <DIO_u8SetPortValue+0x7a>
 5a6:	2c 81       	ldd	r18, Y+4	; 0x04
 5a8:	3d 81       	ldd	r19, Y+5	; 0x05
 5aa:	22 30       	cpi	r18, 0x02	; 2
 5ac:	31 05       	cpc	r19, r1
 5ae:	81 f0       	breq	.+32     	; 0x5d0 <DIO_u8SetPortValue+0x66>
 5b0:	8c 81       	ldd	r24, Y+4	; 0x04
 5b2:	9d 81       	ldd	r25, Y+5	; 0x05
 5b4:	83 30       	cpi	r24, 0x03	; 3
 5b6:	91 05       	cpc	r25, r1
 5b8:	81 f0       	breq	.+32     	; 0x5da <DIO_u8SetPortValue+0x70>
 5ba:	14 c0       	rjmp	.+40     	; 0x5e4 <DIO_u8SetPortValue+0x7a>
		{
		case DIO_u8PORTA: PORTA =copy_u8Value;break;
 5bc:	eb e3       	ldi	r30, 0x3B	; 59
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	80 83       	st	Z, r24
 5c4:	11 c0       	rjmp	.+34     	; 0x5e8 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB: PORTB =copy_u8Value;break;
 5c6:	e8 e3       	ldi	r30, 0x38	; 56
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	8b 81       	ldd	r24, Y+3	; 0x03
 5cc:	80 83       	st	Z, r24
 5ce:	0c c0       	rjmp	.+24     	; 0x5e8 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC: PORTC =copy_u8Value;break;
 5d0:	e5 e3       	ldi	r30, 0x35	; 53
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	80 83       	st	Z, r24
 5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD: PORTD =copy_u8Value;break;
 5da:	e2 e3       	ldi	r30, 0x32	; 50
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	80 83       	st	Z, r24
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_u8SetPortValue+0x7e>
		default: Local_u8ErorrState=1;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_u8ErorrState;
 5e8:	89 81       	ldd	r24, Y+1	; 0x01

}
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	cf 91       	pop	r28
 5f6:	df 91       	pop	r29
 5f8:	08 95       	ret

000005fa <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8Port,u8 copy_u8Pin,u8* copy_pu8Value)
{
 5fa:	df 93       	push	r29
 5fc:	cf 93       	push	r28
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	27 97       	sbiw	r28, 0x07	; 7
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	f8 94       	cli
 608:	de bf       	out	0x3e, r29	; 62
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	cd bf       	out	0x3d, r28	; 61
 60e:	8a 83       	std	Y+2, r24	; 0x02
 610:	6b 83       	std	Y+3, r22	; 0x03
 612:	5d 83       	std	Y+5, r21	; 0x05
 614:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8ErorrState=0;
 616:	19 82       	std	Y+1, r1	; 0x01
if(copy_u8Pin<=DIO_u8PIN7 && *copy_pu8Value!=NULL)
 618:	8b 81       	ldd	r24, Y+3	; 0x03
 61a:	88 30       	cpi	r24, 0x08	; 8
 61c:	08 f0       	brcs	.+2      	; 0x620 <DIO_u8GetPinValue+0x26>
 61e:	7c c0       	rjmp	.+248    	; 0x718 <DIO_u8GetPinValue+0x11e>
 620:	ec 81       	ldd	r30, Y+4	; 0x04
 622:	fd 81       	ldd	r31, Y+5	; 0x05
 624:	80 81       	ld	r24, Z
 626:	88 2f       	mov	r24, r24
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	00 97       	sbiw	r24, 0x00	; 0
 62c:	09 f4       	brne	.+2      	; 0x630 <DIO_u8GetPinValue+0x36>
 62e:	74 c0       	rjmp	.+232    	; 0x718 <DIO_u8GetPinValue+0x11e>
{
	switch(copy_u8Port)
 630:	8a 81       	ldd	r24, Y+2	; 0x02
 632:	28 2f       	mov	r18, r24
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	3f 83       	std	Y+7, r19	; 0x07
 638:	2e 83       	std	Y+6, r18	; 0x06
 63a:	4e 81       	ldd	r20, Y+6	; 0x06
 63c:	5f 81       	ldd	r21, Y+7	; 0x07
 63e:	41 30       	cpi	r20, 0x01	; 1
 640:	51 05       	cpc	r21, r1
 642:	59 f1       	breq	.+86     	; 0x69a <DIO_u8GetPinValue+0xa0>
 644:	8e 81       	ldd	r24, Y+6	; 0x06
 646:	9f 81       	ldd	r25, Y+7	; 0x07
 648:	82 30       	cpi	r24, 0x02	; 2
 64a:	91 05       	cpc	r25, r1
 64c:	34 f4       	brge	.+12     	; 0x65a <DIO_u8GetPinValue+0x60>
 64e:	2e 81       	ldd	r18, Y+6	; 0x06
 650:	3f 81       	ldd	r19, Y+7	; 0x07
 652:	21 15       	cp	r18, r1
 654:	31 05       	cpc	r19, r1
 656:	69 f0       	breq	.+26     	; 0x672 <DIO_u8GetPinValue+0x78>
 658:	5c c0       	rjmp	.+184    	; 0x712 <DIO_u8GetPinValue+0x118>
 65a:	4e 81       	ldd	r20, Y+6	; 0x06
 65c:	5f 81       	ldd	r21, Y+7	; 0x07
 65e:	42 30       	cpi	r20, 0x02	; 2
 660:	51 05       	cpc	r21, r1
 662:	79 f1       	breq	.+94     	; 0x6c2 <DIO_u8GetPinValue+0xc8>
 664:	8e 81       	ldd	r24, Y+6	; 0x06
 666:	9f 81       	ldd	r25, Y+7	; 0x07
 668:	83 30       	cpi	r24, 0x03	; 3
 66a:	91 05       	cpc	r25, r1
 66c:	09 f4       	brne	.+2      	; 0x670 <DIO_u8GetPinValue+0x76>
 66e:	3d c0       	rjmp	.+122    	; 0x6ea <DIO_u8GetPinValue+0xf0>
 670:	50 c0       	rjmp	.+160    	; 0x712 <DIO_u8GetPinValue+0x118>
	{
	case DIO_u8PORTA:*copy_pu8Value = GET_BIT(PINA,copy_u8Pin);break;
 672:	e9 e3       	ldi	r30, 0x39	; 57
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	28 2f       	mov	r18, r24
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	88 2f       	mov	r24, r24
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	a9 01       	movw	r20, r18
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_u8GetPinValue+0x90>
 686:	55 95       	asr	r21
 688:	47 95       	ror	r20
 68a:	8a 95       	dec	r24
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_u8GetPinValue+0x8c>
 68e:	ca 01       	movw	r24, r20
 690:	81 70       	andi	r24, 0x01	; 1
 692:	ec 81       	ldd	r30, Y+4	; 0x04
 694:	fd 81       	ldd	r31, Y+5	; 0x05
 696:	80 83       	st	Z, r24
 698:	41 c0       	rjmp	.+130    	; 0x71c <DIO_u8GetPinValue+0x122>
	case DIO_u8PORTB:*copy_pu8Value = GET_BIT(PINB,copy_u8Pin);break;
 69a:	e6 e3       	ldi	r30, 0x36	; 54
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	88 2f       	mov	r24, r24
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	a9 01       	movw	r20, r18
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_u8GetPinValue+0xb8>
 6ae:	55 95       	asr	r21
 6b0:	47 95       	ror	r20
 6b2:	8a 95       	dec	r24
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_u8GetPinValue+0xb4>
 6b6:	ca 01       	movw	r24, r20
 6b8:	81 70       	andi	r24, 0x01	; 1
 6ba:	ec 81       	ldd	r30, Y+4	; 0x04
 6bc:	fd 81       	ldd	r31, Y+5	; 0x05
 6be:	80 83       	st	Z, r24
 6c0:	2d c0       	rjmp	.+90     	; 0x71c <DIO_u8GetPinValue+0x122>
	case DIO_u8PORTC:*copy_pu8Value = GET_BIT(PINC,copy_u8Pin);break;
 6c2:	e3 e3       	ldi	r30, 0x33	; 51
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	28 2f       	mov	r18, r24
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	8b 81       	ldd	r24, Y+3	; 0x03
 6ce:	88 2f       	mov	r24, r24
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	a9 01       	movw	r20, r18
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_u8GetPinValue+0xe0>
 6d6:	55 95       	asr	r21
 6d8:	47 95       	ror	r20
 6da:	8a 95       	dec	r24
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_u8GetPinValue+0xdc>
 6de:	ca 01       	movw	r24, r20
 6e0:	81 70       	andi	r24, 0x01	; 1
 6e2:	ec 81       	ldd	r30, Y+4	; 0x04
 6e4:	fd 81       	ldd	r31, Y+5	; 0x05
 6e6:	80 83       	st	Z, r24
 6e8:	19 c0       	rjmp	.+50     	; 0x71c <DIO_u8GetPinValue+0x122>
	case DIO_u8PORTD:*copy_pu8Value = GET_BIT(PIND,copy_u8Pin);break;
 6ea:	e0 e3       	ldi	r30, 0x30	; 48
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	28 2f       	mov	r18, r24
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	8b 81       	ldd	r24, Y+3	; 0x03
 6f6:	88 2f       	mov	r24, r24
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	a9 01       	movw	r20, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_u8GetPinValue+0x108>
 6fe:	55 95       	asr	r21
 700:	47 95       	ror	r20
 702:	8a 95       	dec	r24
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_u8GetPinValue+0x104>
 706:	ca 01       	movw	r24, r20
 708:	81 70       	andi	r24, 0x01	; 1
 70a:	ec 81       	ldd	r30, Y+4	; 0x04
 70c:	fd 81       	ldd	r31, Y+5	; 0x05
 70e:	80 83       	st	Z, r24
 710:	05 c0       	rjmp	.+10     	; 0x71c <DIO_u8GetPinValue+0x122>
	default: Local_u8ErorrState=1;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	89 83       	std	Y+1, r24	; 0x01
 716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_u8GetPinValue+0x122>
	}
}
else
{
	Local_u8ErorrState = 1;
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8ErorrState;
 71c:	89 81       	ldd	r24, Y+1	; 0x01

}
 71e:	27 96       	adiw	r28, 0x07	; 7
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	cf 91       	pop	r28
 72c:	df 91       	pop	r29
 72e:	08 95       	ret

00000730 <GIE_voidEnable>:
#include "BIT_MATH.h"
#include"GIE_interface.h"
#include"GIE_register.h"

void GIE_voidEnable(void)
{
 730:	df 93       	push	r29
 732:	cf 93       	push	r28
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 738:	af e5       	ldi	r26, 0x5F	; 95
 73a:	b0 e0       	ldi	r27, 0x00	; 0
 73c:	ef e5       	ldi	r30, 0x5F	; 95
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	80 68       	ori	r24, 0x80	; 128
 744:	8c 93       	st	X, r24
	
}
 746:	cf 91       	pop	r28
 748:	df 91       	pop	r29
 74a:	08 95       	ret

0000074c <GIE_voidDisable>:
void GIE_voidDisable(void)
{
 74c:	df 93       	push	r29
 74e:	cf 93       	push	r28
 750:	cd b7       	in	r28, 0x3d	; 61
 752:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(SREG,SREG_I);
 754:	af e5       	ldi	r26, 0x5F	; 95
 756:	b0 e0       	ldi	r27, 0x00	; 0
 758:	ef e5       	ldi	r30, 0x5F	; 95
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	8f 77       	andi	r24, 0x7F	; 127
 760:	8c 93       	st	X, r24

	
}
 762:	cf 91       	pop	r28
 764:	df 91       	pop	r29
 766:	08 95       	ret

00000768 <LED_voidToggle>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "LED_interface.h"

void LED_voidToggle(u8 copy_u8Port,u8 copy_u8Pin)
{
 768:	df 93       	push	r29
 76a:	cf 93       	push	r28
 76c:	00 d0       	rcall	.+0      	; 0x76e <LED_voidToggle+0x6>
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
 772:	89 83       	std	Y+1, r24	; 0x01
 774:	6a 83       	std	Y+2, r22	; 0x02

	static u8 Local_u8LedState = 0;
	TOG_BIT(Local_u8LedState,0);
 776:	90 91 64 00 	lds	r25, 0x0064
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	89 27       	eor	r24, r25
 77e:	80 93 64 00 	sts	0x0064, r24
	DIO_u8SetPinValue(copy_u8Port,copy_u8Pin,Local_u8LedState);
 782:	89 81       	ldd	r24, Y+1	; 0x01
 784:	68 2f       	mov	r22, r24
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	8a 81       	ldd	r24, Y+2	; 0x02
 78a:	48 2f       	mov	r20, r24
 78c:	50 e0       	ldi	r21, 0x00	; 0
 78e:	80 91 64 00 	lds	r24, 0x0064
 792:	28 2f       	mov	r18, r24
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	cb 01       	movw	r24, r22
 798:	ba 01       	movw	r22, r20
 79a:	a9 01       	movw	r20, r18
 79c:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_u8SetPinValue>
}
 7a0:	0f 90       	pop	r0
 7a2:	0f 90       	pop	r0
 7a4:	cf 91       	pop	r28
 7a6:	df 91       	pop	r29
 7a8:	08 95       	ret

000007aa <PORT_voidInit>:
#include "PORT_register.h"



void PORT_voidInit(void)
{
 7aa:	df 93       	push	r29
 7ac:	cf 93       	push	r28
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62



	DDRA = PORTA_DIR;
 7b2:	ea e3       	ldi	r30, 0x3A	; 58
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	8f ef       	ldi	r24, 0xFF	; 255
 7b8:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
 7ba:	e7 e3       	ldi	r30, 0x37	; 55
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	8f ef       	ldi	r24, 0xFF	; 255
 7c0:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
 7c2:	e4 e3       	ldi	r30, 0x34	; 52
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	8f ef       	ldi	r24, 0xFF	; 255
 7c8:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
 7ca:	e1 e3       	ldi	r30, 0x31	; 49
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	8f ef       	ldi	r24, 0xFF	; 255
 7d0:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VALUE;
 7d2:	eb e3       	ldi	r30, 0x3B	; 59
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VALUE;
 7d8:	e8 e3       	ldi	r30, 0x38	; 56
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	10 82       	st	Z, r1
	PORTC = PORTC_INIT_VALUE;
 7de:	e5 e3       	ldi	r30, 0x35	; 53
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	86 e0       	ldi	r24, 0x06	; 6
 7e4:	80 83       	st	Z, r24
	PORTD = PORTD_INIT_VALUE;
 7e6:	e2 e3       	ldi	r30, 0x32	; 50
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	10 82       	st	Z, r1



}
 7ec:	cf 91       	pop	r28
 7ee:	df 91       	pop	r29
 7f0:	08 95       	ret

000007f2 <RTOS_voidStart>:


STask_t System_Tasks[TASKNUM] = {{NULL}};


void RTOS_voidStart(){
 7f2:	df 93       	push	r29
 7f4:	cf 93       	push	r28
 7f6:	cd b7       	in	r28, 0x3d	; 61
 7f8:	de b7       	in	r29, 0x3e	; 62

	/*send ISR */
	TIMER0_voidSetCallBackFun(&void_schedular);
 7fa:	81 e7       	ldi	r24, 0x71	; 113
 7fc:	94 e0       	ldi	r25, 0x04	; 4
 7fe:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <TIMER0_voidSetCallBackFun>
	/*Initial Timer 0*/
	TIMER0_voidInit();
 802:	0e 94 a9 05 	call	0xb52	; 0xb52 <TIMER0_voidInit>
	/*Enable GIE*/
	GIE_voidEnable();
 806:	0e 94 98 03 	call	0x730	; 0x730 <GIE_voidEnable>


}
 80a:	cf 91       	pop	r28
 80c:	df 91       	pop	r29
 80e:	08 95       	ret

00000810 <RTOS_voidNewTask>:


RTOS_ErrorStatus RTOS_voidNewTask(u16 copy_u16Periodicity , u8 copy_u8Priorty, void (*Pfunc)(void),u16 copy_u16FirstDelay){
 810:	df 93       	push	r29
 812:	cf 93       	push	r28
 814:	cd b7       	in	r28, 0x3d	; 61
 816:	de b7       	in	r29, 0x3e	; 62
 818:	28 97       	sbiw	r28, 0x08	; 8
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	f8 94       	cli
 81e:	de bf       	out	0x3e, r29	; 62
 820:	0f be       	out	0x3f, r0	; 63
 822:	cd bf       	out	0x3d, r28	; 61
 824:	9a 83       	std	Y+2, r25	; 0x02
 826:	89 83       	std	Y+1, r24	; 0x01
 828:	6b 83       	std	Y+3, r22	; 0x03
 82a:	5d 83       	std	Y+5, r21	; 0x05
 82c:	4c 83       	std	Y+4, r20	; 0x04
 82e:	3f 83       	std	Y+7, r19	; 0x07
 830:	2e 83       	std	Y+6, r18	; 0x06

	/*check if priority is exist or not*/
	if(System_Tasks[copy_u8Priorty].PFunc==NULL)
 832:	8b 81       	ldd	r24, Y+3	; 0x03
 834:	28 2f       	mov	r18, r24
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	c9 01       	movw	r24, r18
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	88 0f       	add	r24, r24
 840:	99 1f       	adc	r25, r25
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	82 1b       	sub	r24, r18
 848:	93 0b       	sbc	r25, r19
 84a:	fc 01       	movw	r30, r24
 84c:	e6 59       	subi	r30, 0x96	; 150
 84e:	ff 4f       	sbci	r31, 0xFF	; 255
 850:	80 81       	ld	r24, Z
 852:	91 81       	ldd	r25, Z+1	; 0x01
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	d1 f5       	brne	.+116    	; 0x8cc <__stack+0x6d>
	{
		System_Tasks[copy_u8Priorty].periodicity = copy_u16Periodicity;
 858:	8b 81       	ldd	r24, Y+3	; 0x03
 85a:	28 2f       	mov	r18, r24
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	c9 01       	movw	r24, r18
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	82 1b       	sub	r24, r18
 86e:	93 0b       	sbc	r25, r19
 870:	fc 01       	movw	r30, r24
 872:	eb 59       	subi	r30, 0x9B	; 155
 874:	ff 4f       	sbci	r31, 0xFF	; 255
 876:	89 81       	ldd	r24, Y+1	; 0x01
 878:	9a 81       	ldd	r25, Y+2	; 0x02
 87a:	91 83       	std	Z+1, r25	; 0x01
 87c:	80 83       	st	Z, r24
		System_Tasks[copy_u8Priorty].PFunc = Pfunc;
 87e:	8b 81       	ldd	r24, Y+3	; 0x03
 880:	28 2f       	mov	r18, r24
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	c9 01       	movw	r24, r18
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	88 0f       	add	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	88 0f       	add	r24, r24
 890:	99 1f       	adc	r25, r25
 892:	82 1b       	sub	r24, r18
 894:	93 0b       	sbc	r25, r19
 896:	fc 01       	movw	r30, r24
 898:	e6 59       	subi	r30, 0x96	; 150
 89a:	ff 4f       	sbci	r31, 0xFF	; 255
 89c:	8c 81       	ldd	r24, Y+4	; 0x04
 89e:	9d 81       	ldd	r25, Y+5	; 0x05
 8a0:	91 83       	std	Z+1, r25	; 0x01
 8a2:	80 83       	st	Z, r24
		System_Tasks[copy_u8Priorty].state = RESUME_TASK;
 8a4:	8b 81       	ldd	r24, Y+3	; 0x03
 8a6:	28 2f       	mov	r18, r24
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	c9 01       	movw	r24, r18
 8ac:	88 0f       	add	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	88 0f       	add	r24, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	82 1b       	sub	r24, r18
 8ba:	93 0b       	sbc	r25, r19
 8bc:	fc 01       	movw	r30, r24
 8be:	e7 59       	subi	r30, 0x97	; 151
 8c0:	ff 4f       	sbci	r31, 0xFF	; 255
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	80 83       	st	Z, r24
		return RTOS_NoError;
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	88 87       	std	Y+8, r24	; 0x08
 8ca:	01 c0       	rjmp	.+2      	; 0x8ce <__stack+0x6f>
	}
	else
	{
		return RTOS_ErrorPririotyExist;
 8cc:	18 86       	std	Y+8, r1	; 0x08
 8ce:	88 85       	ldd	r24, Y+8	; 0x08
	}


}
 8d0:	28 96       	adiw	r28, 0x08	; 8
 8d2:	0f b6       	in	r0, 0x3f	; 63
 8d4:	f8 94       	cli
 8d6:	de bf       	out	0x3e, r29	; 62
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	cd bf       	out	0x3d, r28	; 61
 8dc:	cf 91       	pop	r28
 8de:	df 91       	pop	r29
 8e0:	08 95       	ret

000008e2 <void_schedular>:



/*=======================================================
 * =====================================================*/
static void void_schedular(void){
 8e2:	df 93       	push	r29
 8e4:	cf 93       	push	r28
 8e6:	0f 92       	push	r0
 8e8:	cd b7       	in	r28, 0x3d	; 61
 8ea:	de b7       	in	r29, 0x3e	; 62


	u8 Local_u8Ittirate = 0;
 8ec:	19 82       	std	Y+1, r1	; 0x01
	/*check which task achieve the desired tick number*/
	for(Local_u8Ittirate =0 ; Local_u8Ittirate <TASKNUM ; Local_u8Ittirate++)
 8ee:	19 82       	std	Y+1, r1	; 0x01
 8f0:	99 c0       	rjmp	.+306    	; 0xa24 <void_schedular+0x142>
	{
		/*check if task suspended or not*/
		if(System_Tasks[Local_u8Ittirate].state==RESUME_TASK)
 8f2:	89 81       	ldd	r24, Y+1	; 0x01
 8f4:	28 2f       	mov	r18, r24
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	c9 01       	movw	r24, r18
 8fa:	88 0f       	add	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	88 0f       	add	r24, r24
 900:	99 1f       	adc	r25, r25
 902:	88 0f       	add	r24, r24
 904:	99 1f       	adc	r25, r25
 906:	82 1b       	sub	r24, r18
 908:	93 0b       	sbc	r25, r19
 90a:	fc 01       	movw	r30, r24
 90c:	e7 59       	subi	r30, 0x97	; 151
 90e:	ff 4f       	sbci	r31, 0xFF	; 255
 910:	80 81       	ld	r24, Z
 912:	81 30       	cpi	r24, 0x01	; 1
 914:	09 f0       	breq	.+2      	; 0x918 <void_schedular+0x36>
 916:	83 c0       	rjmp	.+262    	; 0xa1e <void_schedular+0x13c>
		{

			if(System_Tasks[Local_u8Ittirate].FirstDelay==0)
 918:	89 81       	ldd	r24, Y+1	; 0x01
 91a:	28 2f       	mov	r18, r24
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	c9 01       	movw	r24, r18
 920:	88 0f       	add	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	88 0f       	add	r24, r24
 926:	99 1f       	adc	r25, r25
 928:	88 0f       	add	r24, r24
 92a:	99 1f       	adc	r25, r25
 92c:	82 1b       	sub	r24, r18
 92e:	93 0b       	sbc	r25, r19
 930:	fc 01       	movw	r30, r24
 932:	e9 59       	subi	r30, 0x99	; 153
 934:	ff 4f       	sbci	r31, 0xFF	; 255
 936:	80 81       	ld	r24, Z
 938:	91 81       	ldd	r25, Z+1	; 0x01
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	09 f0       	breq	.+2      	; 0x940 <void_schedular+0x5e>
 93e:	4d c0       	rjmp	.+154    	; 0x9da <void_schedular+0xf8>
			{
				if(System_Tasks[Local_u8Ittirate].PFunc!=NULL)
 940:	89 81       	ldd	r24, Y+1	; 0x01
 942:	28 2f       	mov	r18, r24
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	c9 01       	movw	r24, r18
 948:	88 0f       	add	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	88 0f       	add	r24, r24
 94e:	99 1f       	adc	r25, r25
 950:	88 0f       	add	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	82 1b       	sub	r24, r18
 956:	93 0b       	sbc	r25, r19
 958:	fc 01       	movw	r30, r24
 95a:	e6 59       	subi	r30, 0x96	; 150
 95c:	ff 4f       	sbci	r31, 0xFF	; 255
 95e:	80 81       	ld	r24, Z
 960:	91 81       	ldd	r25, Z+1	; 0x01
 962:	00 97       	sbiw	r24, 0x00	; 0
 964:	09 f4       	brne	.+2      	; 0x968 <void_schedular+0x86>
 966:	5b c0       	rjmp	.+182    	; 0xa1e <void_schedular+0x13c>
				{
					System_Tasks[Local_u8Ittirate].FirstDelay = System_Tasks[Local_u8Ittirate].periodicity-1;
 968:	89 81       	ldd	r24, Y+1	; 0x01
 96a:	48 2f       	mov	r20, r24
 96c:	50 e0       	ldi	r21, 0x00	; 0
 96e:	89 81       	ldd	r24, Y+1	; 0x01
 970:	28 2f       	mov	r18, r24
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	c9 01       	movw	r24, r18
 976:	88 0f       	add	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	88 0f       	add	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	88 0f       	add	r24, r24
 980:	99 1f       	adc	r25, r25
 982:	82 1b       	sub	r24, r18
 984:	93 0b       	sbc	r25, r19
 986:	fc 01       	movw	r30, r24
 988:	eb 59       	subi	r30, 0x9B	; 155
 98a:	ff 4f       	sbci	r31, 0xFF	; 255
 98c:	80 81       	ld	r24, Z
 98e:	91 81       	ldd	r25, Z+1	; 0x01
 990:	9c 01       	movw	r18, r24
 992:	21 50       	subi	r18, 0x01	; 1
 994:	30 40       	sbci	r19, 0x00	; 0
 996:	ca 01       	movw	r24, r20
 998:	88 0f       	add	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	88 0f       	add	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	88 0f       	add	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	84 1b       	sub	r24, r20
 9a6:	95 0b       	sbc	r25, r21
 9a8:	fc 01       	movw	r30, r24
 9aa:	e9 59       	subi	r30, 0x99	; 153
 9ac:	ff 4f       	sbci	r31, 0xFF	; 255
 9ae:	31 83       	std	Z+1, r19	; 0x01
 9b0:	20 83       	st	Z, r18

					System_Tasks[Local_u8Ittirate].PFunc();
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
 9b4:	28 2f       	mov	r18, r24
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	c9 01       	movw	r24, r18
 9ba:	88 0f       	add	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	88 0f       	add	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	88 0f       	add	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	82 1b       	sub	r24, r18
 9c8:	93 0b       	sbc	r25, r19
 9ca:	fc 01       	movw	r30, r24
 9cc:	e6 59       	subi	r30, 0x96	; 150
 9ce:	ff 4f       	sbci	r31, 0xFF	; 255
 9d0:	01 90       	ld	r0, Z+
 9d2:	f0 81       	ld	r31, Z
 9d4:	e0 2d       	mov	r30, r0
 9d6:	09 95       	icall
 9d8:	22 c0       	rjmp	.+68     	; 0xa1e <void_schedular+0x13c>
				}

			}
			else
			{
				System_Tasks[Local_u8Ittirate].FirstDelay--;
 9da:	89 81       	ldd	r24, Y+1	; 0x01
 9dc:	28 2f       	mov	r18, r24
 9de:	30 e0       	ldi	r19, 0x00	; 0
 9e0:	c9 01       	movw	r24, r18
 9e2:	88 0f       	add	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	88 0f       	add	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	82 1b       	sub	r24, r18
 9f0:	93 0b       	sbc	r25, r19
 9f2:	fc 01       	movw	r30, r24
 9f4:	e9 59       	subi	r30, 0x99	; 153
 9f6:	ff 4f       	sbci	r31, 0xFF	; 255
 9f8:	80 81       	ld	r24, Z
 9fa:	91 81       	ldd	r25, Z+1	; 0x01
 9fc:	ac 01       	movw	r20, r24
 9fe:	41 50       	subi	r20, 0x01	; 1
 a00:	50 40       	sbci	r21, 0x00	; 0
 a02:	c9 01       	movw	r24, r18
 a04:	88 0f       	add	r24, r24
 a06:	99 1f       	adc	r25, r25
 a08:	88 0f       	add	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	82 1b       	sub	r24, r18
 a12:	93 0b       	sbc	r25, r19
 a14:	fc 01       	movw	r30, r24
 a16:	e9 59       	subi	r30, 0x99	; 153
 a18:	ff 4f       	sbci	r31, 0xFF	; 255
 a1a:	51 83       	std	Z+1, r21	; 0x01
 a1c:	40 83       	st	Z, r20
static void void_schedular(void){


	u8 Local_u8Ittirate = 0;
	/*check which task achieve the desired tick number*/
	for(Local_u8Ittirate =0 ; Local_u8Ittirate <TASKNUM ; Local_u8Ittirate++)
 a1e:	89 81       	ldd	r24, Y+1	; 0x01
 a20:	8f 5f       	subi	r24, 0xFF	; 255
 a22:	89 83       	std	Y+1, r24	; 0x01
 a24:	89 81       	ldd	r24, Y+1	; 0x01
 a26:	83 30       	cpi	r24, 0x03	; 3
 a28:	08 f4       	brcc	.+2      	; 0xa2c <void_schedular+0x14a>
 a2a:	63 cf       	rjmp	.-314    	; 0x8f2 <void_schedular+0x10>
		{
			/*Do nothing*/
		}
	}

}
 a2c:	0f 90       	pop	r0
 a2e:	cf 91       	pop	r28
 a30:	df 91       	pop	r29
 a32:	08 95       	ret

00000a34 <RTOS_voidDeleteTask>:

RTOS_ErrorStatus RTOS_voidDeleteTask(u8 copy_u8Priority){
 a34:	df 93       	push	r29
 a36:	cf 93       	push	r28
 a38:	00 d0       	rcall	.+0      	; 0xa3a <RTOS_voidDeleteTask+0x6>
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
 a3e:	89 83       	std	Y+1, r24	; 0x01

	/*check if the user pass a correct priority*/
	if(copy_u8Priority<TASKNUM)
 a40:	89 81       	ldd	r24, Y+1	; 0x01
 a42:	83 30       	cpi	r24, 0x03	; 3
 a44:	a0 f4       	brcc	.+40     	; 0xa6e <RTOS_voidDeleteTask+0x3a>
	{
		System_Tasks[copy_u8Priority].PFunc=NULL;
 a46:	89 81       	ldd	r24, Y+1	; 0x01
 a48:	28 2f       	mov	r18, r24
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	c9 01       	movw	r24, r18
 a4e:	88 0f       	add	r24, r24
 a50:	99 1f       	adc	r25, r25
 a52:	88 0f       	add	r24, r24
 a54:	99 1f       	adc	r25, r25
 a56:	88 0f       	add	r24, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	82 1b       	sub	r24, r18
 a5c:	93 0b       	sbc	r25, r19
 a5e:	fc 01       	movw	r30, r24
 a60:	e6 59       	subi	r30, 0x96	; 150
 a62:	ff 4f       	sbci	r31, 0xFF	; 255
 a64:	11 82       	std	Z+1, r1	; 0x01
 a66:	10 82       	st	Z, r1
		return RTOS_TaskDeleted;
 a68:	82 e0       	ldi	r24, 0x02	; 2
 a6a:	8a 83       	std	Y+2, r24	; 0x02
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <RTOS_voidDeleteTask+0x3e>

	}
	else
	{
		return RTOS_TaskNotDeleted;
 a6e:	83 e0       	ldi	r24, 0x03	; 3
 a70:	8a 83       	std	Y+2, r24	; 0x02
 a72:	8a 81       	ldd	r24, Y+2	; 0x02

	}

}
 a74:	0f 90       	pop	r0
 a76:	0f 90       	pop	r0
 a78:	cf 91       	pop	r28
 a7a:	df 91       	pop	r29
 a7c:	08 95       	ret

00000a7e <RTOS_voidResumeTask>:
RTOS_ErrorStatus RTOS_voidResumeTask(u8 copy_u8Priority){
 a7e:	df 93       	push	r29
 a80:	cf 93       	push	r28
 a82:	00 d0       	rcall	.+0      	; 0xa84 <RTOS_voidResumeTask+0x6>
 a84:	cd b7       	in	r28, 0x3d	; 61
 a86:	de b7       	in	r29, 0x3e	; 62
 a88:	89 83       	std	Y+1, r24	; 0x01

	/*check if task exist*/
	if(System_Tasks[copy_u8Priority].PFunc!=NULL)
 a8a:	89 81       	ldd	r24, Y+1	; 0x01
 a8c:	28 2f       	mov	r18, r24
 a8e:	30 e0       	ldi	r19, 0x00	; 0
 a90:	c9 01       	movw	r24, r18
 a92:	88 0f       	add	r24, r24
 a94:	99 1f       	adc	r25, r25
 a96:	88 0f       	add	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	88 0f       	add	r24, r24
 a9c:	99 1f       	adc	r25, r25
 a9e:	82 1b       	sub	r24, r18
 aa0:	93 0b       	sbc	r25, r19
 aa2:	fc 01       	movw	r30, r24
 aa4:	e6 59       	subi	r30, 0x96	; 150
 aa6:	ff 4f       	sbci	r31, 0xFF	; 255
 aa8:	80 81       	ld	r24, Z
 aaa:	91 81       	ldd	r25, Z+1	; 0x01
 aac:	00 97       	sbiw	r24, 0x00	; 0
 aae:	a1 f0       	breq	.+40     	; 0xad8 <RTOS_voidResumeTask+0x5a>
	{
		System_Tasks[copy_u8Priority].state = RESUME_TASK;
 ab0:	89 81       	ldd	r24, Y+1	; 0x01
 ab2:	28 2f       	mov	r18, r24
 ab4:	30 e0       	ldi	r19, 0x00	; 0
 ab6:	c9 01       	movw	r24, r18
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	88 0f       	add	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	82 1b       	sub	r24, r18
 ac6:	93 0b       	sbc	r25, r19
 ac8:	fc 01       	movw	r30, r24
 aca:	e7 59       	subi	r30, 0x97	; 151
 acc:	ff 4f       	sbci	r31, 0xFF	; 255
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	80 83       	st	Z, r24
		return RTOS_TaskResumed;
 ad2:	86 e0       	ldi	r24, 0x06	; 6
 ad4:	8a 83       	std	Y+2, r24	; 0x02
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <RTOS_voidResumeTask+0x5e>

	}
	else {
		return RTOS_TaskResumedFailed;
 ad8:	87 e0       	ldi	r24, 0x07	; 7
 ada:	8a 83       	std	Y+2, r24	; 0x02
 adc:	8a 81       	ldd	r24, Y+2	; 0x02

	}


}
 ade:	0f 90       	pop	r0
 ae0:	0f 90       	pop	r0
 ae2:	cf 91       	pop	r28
 ae4:	df 91       	pop	r29
 ae6:	08 95       	ret

00000ae8 <RTOS_voidSuspendTask>:
RTOS_ErrorStatus RTOS_voidSuspendTask(u8 copy_u8Priority){
 ae8:	df 93       	push	r29
 aea:	cf 93       	push	r28
 aec:	00 d0       	rcall	.+0      	; 0xaee <RTOS_voidSuspendTask+0x6>
 aee:	cd b7       	in	r28, 0x3d	; 61
 af0:	de b7       	in	r29, 0x3e	; 62
 af2:	89 83       	std	Y+1, r24	; 0x01
	/*check if task exist*/

	if(System_Tasks[copy_u8Priority].PFunc!=NULL)
 af4:	89 81       	ldd	r24, Y+1	; 0x01
 af6:	28 2f       	mov	r18, r24
 af8:	30 e0       	ldi	r19, 0x00	; 0
 afa:	c9 01       	movw	r24, r18
 afc:	88 0f       	add	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	88 0f       	add	r24, r24
 b02:	99 1f       	adc	r25, r25
 b04:	88 0f       	add	r24, r24
 b06:	99 1f       	adc	r25, r25
 b08:	82 1b       	sub	r24, r18
 b0a:	93 0b       	sbc	r25, r19
 b0c:	fc 01       	movw	r30, r24
 b0e:	e6 59       	subi	r30, 0x96	; 150
 b10:	ff 4f       	sbci	r31, 0xFF	; 255
 b12:	80 81       	ld	r24, Z
 b14:	91 81       	ldd	r25, Z+1	; 0x01
 b16:	00 97       	sbiw	r24, 0x00	; 0
 b18:	a1 f0       	breq	.+40     	; 0xb42 <RTOS_voidSuspendTask+0x5a>
	{
		System_Tasks[copy_u8Priority].state = SUSPEND_TASK;
 b1a:	89 81       	ldd	r24, Y+1	; 0x01
 b1c:	28 2f       	mov	r18, r24
 b1e:	30 e0       	ldi	r19, 0x00	; 0
 b20:	c9 01       	movw	r24, r18
 b22:	88 0f       	add	r24, r24
 b24:	99 1f       	adc	r25, r25
 b26:	88 0f       	add	r24, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	88 0f       	add	r24, r24
 b2c:	99 1f       	adc	r25, r25
 b2e:	82 1b       	sub	r24, r18
 b30:	93 0b       	sbc	r25, r19
 b32:	fc 01       	movw	r30, r24
 b34:	e7 59       	subi	r30, 0x97	; 151
 b36:	ff 4f       	sbci	r31, 0xFF	; 255
 b38:	82 e0       	ldi	r24, 0x02	; 2
 b3a:	80 83       	st	Z, r24
		return RTOS_TaskSuspended;
 b3c:	84 e0       	ldi	r24, 0x04	; 4
 b3e:	8a 83       	std	Y+2, r24	; 0x02
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <RTOS_voidSuspendTask+0x5e>

	}
	else {
		return RTOS_TaskSuspendedFailed;
 b42:	85 e0       	ldi	r24, 0x05	; 5
 b44:	8a 83       	std	Y+2, r24	; 0x02
 b46:	8a 81       	ldd	r24, Y+2	; 0x02

	}


}
 b48:	0f 90       	pop	r0
 b4a:	0f 90       	pop	r0
 b4c:	cf 91       	pop	r28
 b4e:	df 91       	pop	r29
 b50:	08 95       	ret

00000b52 <TIMER0_voidInit>:

void (*GlobalPFunc)(void) = NULL;


/*Compare Match Value Handling by Interrupt*/
void TIMER0_voidInit(){
 b52:	df 93       	push	r29
 b54:	cf 93       	push	r28
 b56:	cd b7       	in	r28, 0x3d	; 61
 b58:	de b7       	in	r29, 0x3e	; 62


	/*select mode to Compare Match Value*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
 b5a:	a3 e5       	ldi	r26, 0x53	; 83
 b5c:	b0 e0       	ldi	r27, 0x00	; 0
 b5e:	e3 e5       	ldi	r30, 0x53	; 83
 b60:	f0 e0       	ldi	r31, 0x00	; 0
 b62:	80 81       	ld	r24, Z
 b64:	8f 7b       	andi	r24, 0xBF	; 191
 b66:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
 b68:	a3 e5       	ldi	r26, 0x53	; 83
 b6a:	b0 e0       	ldi	r27, 0x00	; 0
 b6c:	e3 e5       	ldi	r30, 0x53	; 83
 b6e:	f0 e0       	ldi	r31, 0x00	; 0
 b70:	80 81       	ld	r24, Z
 b72:	88 60       	ori	r24, 0x08	; 8
 b74:	8c 93       	st	X, r24
	/*Select Pre-Scaler dev by 64*/
	//	Local_u8PrescalerMask |= PRE_SCALER_64;
	//	TCCR0|=Local_u8PrescalerMask;
	/*What happen on OCR0 --> Toggle*/
	CLR_BIT(TCCR0,TCCR0_COM00);
 b76:	a3 e5       	ldi	r26, 0x53	; 83
 b78:	b0 e0       	ldi	r27, 0x00	; 0
 b7a:	e3 e5       	ldi	r30, 0x53	; 83
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	80 81       	ld	r24, Z
 b80:	8f 7e       	andi	r24, 0xEF	; 239
 b82:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM01);
 b84:	a3 e5       	ldi	r26, 0x53	; 83
 b86:	b0 e0       	ldi	r27, 0x00	; 0
 b88:	e3 e5       	ldi	r30, 0x53	; 83
 b8a:	f0 e0       	ldi	r31, 0x00	; 0
 b8c:	80 81       	ld	r24, Z
 b8e:	8f 7d       	andi	r24, 0xDF	; 223
 b90:	8c 93       	st	X, r24
	/*Set the Compare Match Value*/
	OCR0 =Compare_Match_Value;
 b92:	ec e5       	ldi	r30, 0x5C	; 92
 b94:	f0 e0       	ldi	r31, 0x00	; 0
 b96:	8d e7       	ldi	r24, 0x7D	; 125
 b98:	80 83       	st	Z, r24
	/*Enable Compare Match value Interrupt*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
 b9a:	a9 e5       	ldi	r26, 0x59	; 89
 b9c:	b0 e0       	ldi	r27, 0x00	; 0
 b9e:	e9 e5       	ldi	r30, 0x59	; 89
 ba0:	f0 e0       	ldi	r31, 0x00	; 0
 ba2:	80 81       	ld	r24, Z
 ba4:	82 60       	ori	r24, 0x02	; 2
 ba6:	8c 93       	st	X, r24
	//	u8 Local_u8PrescalerMask = 0;
	SET_BIT(TCCR0,TCCR0_CS00);
 ba8:	a3 e5       	ldi	r26, 0x53	; 83
 baa:	b0 e0       	ldi	r27, 0x00	; 0
 bac:	e3 e5       	ldi	r30, 0x53	; 83
 bae:	f0 e0       	ldi	r31, 0x00	; 0
 bb0:	80 81       	ld	r24, Z
 bb2:	81 60       	ori	r24, 0x01	; 1
 bb4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
 bb6:	a3 e5       	ldi	r26, 0x53	; 83
 bb8:	b0 e0       	ldi	r27, 0x00	; 0
 bba:	e3 e5       	ldi	r30, 0x53	; 83
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	80 81       	ld	r24, Z
 bc0:	82 60       	ori	r24, 0x02	; 2
 bc2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
 bc4:	a3 e5       	ldi	r26, 0x53	; 83
 bc6:	b0 e0       	ldi	r27, 0x00	; 0
 bc8:	e3 e5       	ldi	r30, 0x53	; 83
 bca:	f0 e0       	ldi	r31, 0x00	; 0
 bcc:	80 81       	ld	r24, Z
 bce:	8b 7f       	andi	r24, 0xFB	; 251
 bd0:	8c 93       	st	X, r24


}
 bd2:	cf 91       	pop	r28
 bd4:	df 91       	pop	r29
 bd6:	08 95       	ret

00000bd8 <TIMER0_voidSetCallBackFun>:

/**/
void TIMER0_voidSetCallBackFun(void(*pFun)(void)){
 bd8:	df 93       	push	r29
 bda:	cf 93       	push	r28
 bdc:	00 d0       	rcall	.+0      	; 0xbde <TIMER0_voidSetCallBackFun+0x6>
 bde:	cd b7       	in	r28, 0x3d	; 61
 be0:	de b7       	in	r29, 0x3e	; 62
 be2:	9a 83       	std	Y+2, r25	; 0x02
 be4:	89 83       	std	Y+1, r24	; 0x01


	GlobalPFunc = pFun;
 be6:	89 81       	ldd	r24, Y+1	; 0x01
 be8:	9a 81       	ldd	r25, Y+2	; 0x02
 bea:	90 93 7b 00 	sts	0x007B, r25
 bee:	80 93 7a 00 	sts	0x007A, r24

}
 bf2:	0f 90       	pop	r0
 bf4:	0f 90       	pop	r0
 bf6:	cf 91       	pop	r28
 bf8:	df 91       	pop	r29
 bfa:	08 95       	ret

00000bfc <__vector_10>:



void __vector_10(void) __attribute__((signal)); /*attribute is a message from complier to the optimizer of linker to tell it that  its an interrupt signal*/
void __vector_10(void)
{
 bfc:	1f 92       	push	r1
 bfe:	0f 92       	push	r0
 c00:	0f b6       	in	r0, 0x3f	; 63
 c02:	0f 92       	push	r0
 c04:	11 24       	eor	r1, r1
 c06:	2f 93       	push	r18
 c08:	3f 93       	push	r19
 c0a:	4f 93       	push	r20
 c0c:	5f 93       	push	r21
 c0e:	6f 93       	push	r22
 c10:	7f 93       	push	r23
 c12:	8f 93       	push	r24
 c14:	9f 93       	push	r25
 c16:	af 93       	push	r26
 c18:	bf 93       	push	r27
 c1a:	ef 93       	push	r30
 c1c:	ff 93       	push	r31
 c1e:	df 93       	push	r29
 c20:	cf 93       	push	r28
 c22:	cd b7       	in	r28, 0x3d	; 61
 c24:	de b7       	in	r29, 0x3e	; 62
	GlobalPFunc();
 c26:	e0 91 7a 00 	lds	r30, 0x007A
 c2a:	f0 91 7b 00 	lds	r31, 0x007B
 c2e:	09 95       	icall
}
 c30:	cf 91       	pop	r28
 c32:	df 91       	pop	r29
 c34:	ff 91       	pop	r31
 c36:	ef 91       	pop	r30
 c38:	bf 91       	pop	r27
 c3a:	af 91       	pop	r26
 c3c:	9f 91       	pop	r25
 c3e:	8f 91       	pop	r24
 c40:	7f 91       	pop	r23
 c42:	6f 91       	pop	r22
 c44:	5f 91       	pop	r21
 c46:	4f 91       	pop	r20
 c48:	3f 91       	pop	r19
 c4a:	2f 91       	pop	r18
 c4c:	0f 90       	pop	r0
 c4e:	0f be       	out	0x3f, r0	; 63
 c50:	0f 90       	pop	r0
 c52:	1f 90       	pop	r1
 c54:	18 95       	reti

00000c56 <main>:
void LED2();
void LED3();


void main(void)
{
 c56:	df 93       	push	r29
 c58:	cf 93       	push	r28
 c5a:	cd b7       	in	r28, 0x3d	; 61
 c5c:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 c5e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <PORT_voidInit>
	RTOS_voidStart();
 c62:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <RTOS_voidStart>
	//Periodicitiy  = 10ms
	RTOS_voidNewTask(10,0,&LED1,0);
 c66:	22 e5       	ldi	r18, 0x52	; 82
 c68:	36 e0       	ldi	r19, 0x06	; 6
 c6a:	8a e0       	ldi	r24, 0x0A	; 10
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	60 e0       	ldi	r22, 0x00	; 0
 c70:	a9 01       	movw	r20, r18
 c72:	20 e0       	ldi	r18, 0x00	; 0
 c74:	30 e0       	ldi	r19, 0x00	; 0
 c76:	0e 94 08 04 	call	0x810	; 0x810 <RTOS_voidNewTask>
	//Periodicitiy  = 20ms , FD = 1ms
	RTOS_voidNewTask(20,1,&LED2,1);
 c7a:	26 e6       	ldi	r18, 0x66	; 102
 c7c:	36 e0       	ldi	r19, 0x06	; 6
 c7e:	84 e1       	ldi	r24, 0x14	; 20
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	61 e0       	ldi	r22, 0x01	; 1
 c84:	a9 01       	movw	r20, r18
 c86:	21 e0       	ldi	r18, 0x01	; 1
 c88:	30 e0       	ldi	r19, 0x00	; 0
 c8a:	0e 94 08 04 	call	0x810	; 0x810 <RTOS_voidNewTask>
	//Periodicitiy  = 30ms , FD = 3ms
	RTOS_voidNewTask(30,2,&LED3,3);
 c8e:	2a e7       	ldi	r18, 0x7A	; 122
 c90:	36 e0       	ldi	r19, 0x06	; 6
 c92:	8e e1       	ldi	r24, 0x1E	; 30
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	62 e0       	ldi	r22, 0x02	; 2
 c98:	a9 01       	movw	r20, r18
 c9a:	23 e0       	ldi	r18, 0x03	; 3
 c9c:	30 e0       	ldi	r19, 0x00	; 0
 c9e:	0e 94 08 04 	call	0x810	; 0x810 <RTOS_voidNewTask>
 ca2:	ff cf       	rjmp	.-2      	; 0xca2 <main+0x4c>

00000ca4 <LED1>:

}


void LED1()
{
 ca4:	df 93       	push	r29
 ca6:	cf 93       	push	r28
 ca8:	cd b7       	in	r28, 0x3d	; 61
 caa:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8PinStat=1;
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN5,Local_u8PinStat);
 cac:	90 91 60 00 	lds	r25, 0x0060
 cb0:	83 e0       	ldi	r24, 0x03	; 3
 cb2:	65 e0       	ldi	r22, 0x05	; 5
 cb4:	49 2f       	mov	r20, r25
 cb6:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_u8SetPinValue>
	Local_u8PinStat^=1;
 cba:	90 91 60 00 	lds	r25, 0x0060
 cbe:	81 e0       	ldi	r24, 0x01	; 1
 cc0:	89 27       	eor	r24, r25
 cc2:	80 93 60 00 	sts	0x0060, r24
}
 cc6:	cf 91       	pop	r28
 cc8:	df 91       	pop	r29
 cca:	08 95       	ret

00000ccc <LED2>:

void LED2()
{
 ccc:	df 93       	push	r29
 cce:	cf 93       	push	r28
 cd0:	cd b7       	in	r28, 0x3d	; 61
 cd2:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8PinStat=1;
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,Local_u8PinStat);
 cd4:	90 91 61 00 	lds	r25, 0x0061
 cd8:	83 e0       	ldi	r24, 0x03	; 3
 cda:	66 e0       	ldi	r22, 0x06	; 6
 cdc:	49 2f       	mov	r20, r25
 cde:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_u8SetPinValue>
	Local_u8PinStat^=1;
 ce2:	90 91 61 00 	lds	r25, 0x0061
 ce6:	81 e0       	ldi	r24, 0x01	; 1
 ce8:	89 27       	eor	r24, r25
 cea:	80 93 61 00 	sts	0x0061, r24

}
 cee:	cf 91       	pop	r28
 cf0:	df 91       	pop	r29
 cf2:	08 95       	ret

00000cf4 <LED3>:
void LED3()
{
 cf4:	df 93       	push	r29
 cf6:	cf 93       	push	r28
 cf8:	cd b7       	in	r28, 0x3d	; 61
 cfa:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8PinStat=1;
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,Local_u8PinStat);
 cfc:	90 91 62 00 	lds	r25, 0x0062
 d00:	83 e0       	ldi	r24, 0x03	; 3
 d02:	67 e0       	ldi	r22, 0x07	; 7
 d04:	49 2f       	mov	r20, r25
 d06:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_u8SetPinValue>
	Local_u8PinStat^=1;
 d0a:	90 91 62 00 	lds	r25, 0x0062
 d0e:	81 e0       	ldi	r24, 0x01	; 1
 d10:	89 27       	eor	r24, r25
 d12:	80 93 62 00 	sts	0x0062, r24
}
 d16:	cf 91       	pop	r28
 d18:	df 91       	pop	r29
 d1a:	08 95       	ret

00000d1c <_exit>:
 d1c:	f8 94       	cli

00000d1e <__stop_program>:
 d1e:	ff cf       	rjmp	.-2      	; 0xd1e <__stop_program>
